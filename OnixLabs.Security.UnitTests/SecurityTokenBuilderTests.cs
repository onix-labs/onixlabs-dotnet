// Copyright 2020 ONIXLabs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

namespace OnixLabs.Security.UnitTests;

public sealed class SecurityTokenBuilderTests
{
    [Theory(DisplayName = "SecurityTokenBuilder.UseCharacters should produce the expected result")]
    [InlineData(16, 0, "2331C1!y@xxz1z@A")]
    [InlineData(16, 1, "CBz32yx@B2ACx@22")]
    [InlineData(16, 2, "3yB@Bx3yCA3AAzyx")]
    [InlineData(16, 3, "x2!C1BC@xyz32AA!")]
    [InlineData(16, 4, "3@1yAA2yz3C1y13z")]
    [InlineData(17, 0, "2331C1!y@xxz1z@A!")]
    [InlineData(17, 1, "CBz32yx@B2ACx@22x")]
    [InlineData(17, 2, "3yB@Bx3yCA3AAzyx2")]
    [InlineData(17, 3, "x2!C1BC@xyz32AA!B")]
    [InlineData(17, 4, "3@1yAA2yz3C1y13zz")]
    [InlineData(18, 0, "2331C1!y@xxz1z@A!@")]
    [InlineData(18, 1, "CBz32yx@B2ACx@22x1")]
    [InlineData(18, 2, "3yB@Bx3yCA3AAzyx2C")]
    [InlineData(18, 3, "x2!C1BC@xyz32AA!B!")]
    [InlineData(18, 4, "3@1yAA2yz3C1y13zzz")]
    [InlineData(19, 0, "2331C1!y@xxz1z@A!@2")]
    [InlineData(19, 1, "CBz32yx@B2ACx@22x12")]
    [InlineData(19, 2, "3yB@Bx3yCA3AAzyx2C3")]
    [InlineData(19, 3, "x2!C1BC@xyz32AA!B!3")]
    [InlineData(19, 4, "3@1yAA2yz3C1y13zzz3")]
    [InlineData(20, 0, "2331C1!y@xxz1z@A!@2x")]
    [InlineData(20, 1, "CBz32yx@B2ACx@22x122")]
    [InlineData(20, 2, "3yB@Bx3yCA3AAzyx2C3A")]
    [InlineData(20, 3, "x2!C1BC@xyz32AA!B!3z")]
    [InlineData(20, 4, "3@1yAA2yz3C1y13zzz3!")]
    [InlineData(21, 0, "2331C1!y@xxz1z@A!@2x3")]
    [InlineData(21, 1, "CBz32yx@B2ACx@22x122@")]
    [InlineData(21, 2, "3yB@Bx3yCA3AAzyx2C3AA")]
    [InlineData(21, 3, "x2!C1BC@xyz32AA!B!3zC")]
    [InlineData(21, 4, "3@1yAA2yz3C1y13zzz3!x")]
    [InlineData(22, 0, "2331C1!y@xxz1z@A!@2x3!")]
    [InlineData(22, 1, "CBz32yx@B2ACx@22x122@B")]
    [InlineData(22, 2, "3yB@Bx3yCA3AAzyx2C3AAx")]
    [InlineData(22, 3, "x2!C1BC@xyz32AA!B!3zC1")]
    [InlineData(22, 4, "3@1yAA2yz3C1y13zzz3!x!")]
    [InlineData(23, 0, "2331C1!y@xxz1z@A!@2x3!@")]
    [InlineData(23, 1, "CBz32yx@B2ACx@22x122@BB")]
    [InlineData(23, 2, "3yB@Bx3yCA3AAzyx2C3AAxx")]
    [InlineData(23, 3, "x2!C1BC@xyz32AA!B!3zC1z")]
    [InlineData(23, 4, "3@1yAA2yz3C1y13zzz3!x!2")]
    [InlineData(24, 0, "2331C1!y@xxz1z@A!@2x3!@A")]
    [InlineData(24, 1, "CBz32yx@B2ACx@22x122@BBy")]
    [InlineData(24, 2, "3yB@Bx3yCA3AAzyx2C3AAxx3")]
    [InlineData(24, 3, "x2!C1BC@xyz32AA!B!3zC1zA")]
    [InlineData(24, 4, "3@1yAA2yz3C1y13zzz3!x!2y")]
    [InlineData(25, 0, "2331C1!y@xxz1z@A!@2x3!@A2")]
    [InlineData(25, 1, "CBz32yx@B2ACx@22x122@BBy3")]
    [InlineData(25, 2, "3yB@Bx3yCA3AAzyx2C3AAxx3!")]
    [InlineData(25, 3, "x2!C1BC@xyz32AA!B!3zC1zA@")]
    [InlineData(25, 4, "3@1yAA2yz3C1y13zzz3!x!2yB")]
    [InlineData(26, 0, "2331C1!y@xxz1z@A!@2x3!@A2z")]
    [InlineData(26, 1, "CBz32yx@B2ACx@22x122@BBy3B")]
    [InlineData(26, 2, "3yB@Bx3yCA3AAzyx2C3AAxx3!3")]
    [InlineData(26, 3, "x2!C1BC@xyz32AA!B!3zC1zA@z")]
    [InlineData(26, 4, "3@1yAA2yz3C1y13zzz3!x!2yBB")]
    [InlineData(27, 0, "2331C1!y@xxz1z@A!@2x3!@A2z@")]
    [InlineData(27, 1, "CBz32yx@B2ACx@22x122@BBy3B3")]
    [InlineData(27, 2, "3yB@Bx3yCA3AAzyx2C3AAxx3!32")]
    [InlineData(27, 3, "x2!C1BC@xyz32AA!B!3zC1zA@zz")]
    [InlineData(27, 4, "3@1yAA2yz3C1y13zzz3!x!2yBBy")]
    [InlineData(28, 0, "2331C1!y@xxz1z@A!@2x3!@A2z@2")]
    [InlineData(28, 1, "CBz32yx@B2ACx@22x122@BBy3B3x")]
    [InlineData(28, 2, "3yB@Bx3yCA3AAzyx2C3AAxx3!32@")]
    [InlineData(28, 3, "x2!C1BC@xyz32AA!B!3zC1zA@zz1")]
    [InlineData(28, 4, "3@1yAA2yz3C1y13zzz3!x!2yBByB")]
    [InlineData(29, 0, "2331C1!y@xxz1z@A!@2x3!@A2z@21")]
    [InlineData(29, 1, "CBz32yx@B2ACx@22x122@BBy3B3x!")]
    [InlineData(29, 2, "3yB@Bx3yCA3AAzyx2C3AAxx3!32@B")]
    [InlineData(29, 3, "x2!C1BC@xyz32AA!B!3zC1zA@zz1y")]
    [InlineData(29, 4, "3@1yAA2yz3C1y13zzz3!x!2yBByB2")]
    [InlineData(30, 0, "2331C1!y@xxz1z@A!@2x3!@A2z@21A")]
    [InlineData(30, 1, "CBz32yx@B2ACx@22x122@BBy3B3x!!")]
    [InlineData(30, 2, "3yB@Bx3yCA3AAzyx2C3AAxx3!32@B2")]
    [InlineData(30, 3, "x2!C1BC@xyz32AA!B!3zC1zA@zz1yz")]
    [InlineData(30, 4, "3@1yAA2yz3C1y13zzz3!x!2yBByB2x")]
    [InlineData(31, 0, "2331C1!y@xxz1z@A!@2x3!@A2z@21AC")]
    [InlineData(31, 1, "CBz32yx@B2ACx@22x122@BBy3B3x!!1")]
    [InlineData(31, 2, "3yB@Bx3yCA3AAzyx2C3AAxx3!32@B2@")]
    [InlineData(31, 3, "x2!C1BC@xyz32AA!B!3zC1zA@zz1yzx")]
    [InlineData(31, 4, "3@1yAA2yz3C1y13zzz3!x!2yBByB2x2")]
    [InlineData(32, 0, "2331C1!y@xxz1z@A!@2x3!@A2z@21ACy")]
    [InlineData(32, 1, "CBz32yx@B2ACx@22x122@BBy3B3x!!12")]
    [InlineData(32, 2, "3yB@Bx3yCA3AAzyx2C3AAxx3!32@B2@@")]
    [InlineData(32, 3, "x2!C1BC@xyz32AA!B!3zC1zA@zz1yzxC")]
    [InlineData(32, 4, "3@1yAA2yz3C1y13zzz3!x!2yBByB2x2z")]
    public void SecurityTokenBuilderUseCharactersShouldProduceTheExpectedResult(int length, int seed, string expected)
    {
        // Given
        SecurityTokenBuilder builder = SecurityTokenBuilder
            .CreatePseudoRandom(length, seed)
            .UseCharacters("ABCxyz123!@$");

        // When
        string actual = builder.ToSecurityToken().ToString();

        // Then
        Assert.Equal(expected, actual);
    }

    [Theory(DisplayName = "SecurityTokenBuilder.UseLowerCase should produce the expected result")]
    [InlineData(16, 0, "sutnfnwlyghlplya")]
    [InlineData(16, 1, "gcltqkixcqagiyrq")]
    [InlineData(16, 2, "tkeychulfataamjg")]
    [InlineData(16, 3, "hrveoegxijmuracw")]
    [InlineData(16, 4, "uyokabrllsfojntn")]
    [InlineData(17, 0, "sutnfnwlyghlplyav")]
    [InlineData(17, 1, "gcltqkixcqagiyrqh")]
    [InlineData(17, 2, "tkeychulfataamjgr")]
    [InlineData(17, 3, "hrveoegxijmuracwd")]
    [InlineData(17, 4, "uyokabrllsfojntnn")]
    [InlineData(18, 0, "sutnfnwlyghlplyavy")]
    [InlineData(18, 1, "gcltqkixcqagiyrqhp")]
    [InlineData(18, 2, "tkeychulfataamjgrf")]
    [InlineData(18, 3, "hrveoegxijmuracwdv")]
    [InlineData(18, 4, "uyokabrllsfojntnnl")]
    [InlineData(19, 0, "sutnfnwlyghlplyavyq")]
    [InlineData(19, 1, "gcltqkixcqagiyrqhpr")]
    [InlineData(19, 2, "tkeychulfataamjgrfs")]
    [InlineData(19, 3, "hrveoegxijmuracwdvs")]
    [InlineData(19, 4, "uyokabrllsfojntnnlt")]
    [InlineData(20, 0, "sutnfnwlyghlplyavyqh")]
    [InlineData(20, 1, "gcltqkixcqagiyrqhprr")]
    [InlineData(20, 2, "tkeychulfataamjgrfsc")]
    [InlineData(20, 3, "hrveoegxijmuracwdvsl")]
    [InlineData(20, 4, "uyokabrllsfojntnnltv")]
    [InlineData(21, 0, "sutnfnwlyghlplyavyqhu")]
    [InlineData(21, 1, "gcltqkixcqagiyrqhprrx")]
    [InlineData(21, 2, "tkeychulfataamjgrfscc")]
    [InlineData(21, 3, "hrveoegxijmuracwdvslf")]
    [InlineData(21, 4, "uyokabrllsfojntnnltvi")]
    [InlineData(22, 0, "sutnfnwlyghlplyavyqhuv")]
    [InlineData(22, 1, "gcltqkixcqagiyrqhprrxc")]
    [InlineData(22, 2, "tkeychulfataamjgrfscci")]
    [InlineData(22, 3, "hrveoegxijmuracwdvslfo")]
    [InlineData(22, 4, "uyokabrllsfojntnnltviu")]
    [InlineData(23, 0, "sutnfnwlyghlplyavyqhuvy")]
    [InlineData(23, 1, "gcltqkixcqagiyrqhprrxce")]
    [InlineData(23, 2, "tkeychulfataamjgrfsccii")]
    [InlineData(23, 3, "hrveoegxijmuracwdvslfom")]
    [InlineData(23, 4, "uyokabrllsfojntnnltviuq")]
    [InlineData(24, 0, "sutnfnwlyghlplyavyqhuvya")]
    [InlineData(24, 1, "gcltqkixcqagiyrqhprrxcej")]
    [InlineData(24, 2, "tkeychulfataamjgrfscciis")]
    [InlineData(24, 3, "hrveoegxijmuracwdvslfomc")]
    [InlineData(24, 4, "uyokabrllsfojntnnltviuqk")]
    [InlineData(25, 0, "sutnfnwlyghlplyavyqhuvyar")]
    [InlineData(25, 1, "gcltqkixcqagiyrqhprrxcejt")]
    [InlineData(25, 2, "tkeychulfataamjgrfscciisw")]
    [InlineData(25, 3, "hrveoegxijmuracwdvslfomcy")]
    [InlineData(25, 4, "uyokabrllsfojntnnltviuqkc")]
    [InlineData(26, 0, "sutnfnwlyghlplyavyqhuvyarn")]
    [InlineData(26, 1, "gcltqkixcqagiyrqhprrxcejte")]
    [InlineData(26, 2, "tkeychulfataamjgrfscciiswu")]
    [InlineData(26, 3, "hrveoegxijmuracwdvslfomcyl")]
    [InlineData(26, 4, "uyokabrllsfojntnnltviuqkcc")]
    [InlineData(27, 0, "sutnfnwlyghlplyavyqhuvyarnx")]
    [InlineData(27, 1, "gcltqkixcqagiyrqhprrxcejtet")]
    [InlineData(27, 2, "tkeychulfataamjgrfscciiswuq")]
    [InlineData(27, 3, "hrveoegxijmuracwdvslfomcylm")]
    [InlineData(27, 4, "uyokabrllsfojntnnltviuqkccj")]
    [InlineData(28, 0, "sutnfnwlyghlplyavyqhuvyarnxr")]
    [InlineData(28, 1, "gcltqkixcqagiyrqhprrxcejteth")]
    [InlineData(28, 2, "tkeychulfataamjgrfscciiswuqx")]
    [InlineData(28, 3, "hrveoegxijmuracwdvslfomcylmn")]
    [InlineData(28, 4, "uyokabrllsfojntnnltviuqkccje")]
    [InlineData(29, 0, "sutnfnwlyghlplyavyqhuvyarnxrn")]
    [InlineData(29, 1, "gcltqkixcqagiyrqhprrxcejtethu")]
    [InlineData(29, 2, "tkeychulfataamjgrfscciiswuqxc")]
    [InlineData(29, 3, "hrveoegxijmuracwdvslfomcylmnj")]
    [InlineData(29, 4, "uyokabrllsfojntnnltviuqkccjeq")]
    [InlineData(30, 0, "sutnfnwlyghlplyavyqhuvyarnxrnc")]
    [InlineData(30, 1, "gcltqkixcqagiyrqhprrxcejtethuw")]
    [InlineData(30, 2, "tkeychulfataamjgrfscciiswuqxcr")]
    [InlineData(30, 3, "hrveoegxijmuracwdvslfomcylmnjm")]
    [InlineData(30, 4, "uyokabrllsfojntnnltviuqkccjeqh")]
    [InlineData(31, 0, "sutnfnwlyghlplyavyqhuvyarnxrnce")]
    [InlineData(31, 1, "gcltqkixcqagiyrqhprrxcejtethuwn")]
    [InlineData(31, 2, "tkeychulfataamjgrfscciiswuqxcrx")]
    [InlineData(31, 3, "hrveoegxijmuracwdvslfomcylmnjmh")]
    [InlineData(31, 4, "uyokabrllsfojntnnltviuqkccjeqhq")]
    [InlineData(32, 0, "sutnfnwlyghlplyavyqhuvyarnxrncel")]
    [InlineData(32, 1, "gcltqkixcqagiyrqhprrxcejtethuwnr")]
    [InlineData(32, 2, "tkeychulfataamjgrfscciiswuqxcrxy")]
    [InlineData(32, 3, "hrveoegxijmuracwdvslfomcylmnjmhg")]
    [InlineData(32, 4, "uyokabrllsfojntnnltviuqkccjeqhqm")]
    public void SecurityTokenBuilderUseLowerCaseShouldProduceTheExpectedResult(int length, int seed, string expected)
    {
        // Given
        SecurityTokenBuilder builder = SecurityTokenBuilder
            .CreatePseudoRandom(length, seed)
            .UseLowerCase();

        // When
        string actual = builder.ToSecurityToken().ToString();

        // Then
        Assert.Equal(expected, actual);
    }

    [Theory(DisplayName = "SecurityTokenBuilder.UseUpperCase should produce the expected result")]
    [InlineData(16, 0, "SUTNFNWLYGHLPLYA")]
    [InlineData(16, 1, "GCLTQKIXCQAGIYRQ")]
    [InlineData(16, 2, "TKEYCHULFATAAMJG")]
    [InlineData(16, 3, "HRVEOEGXIJMURACW")]
    [InlineData(16, 4, "UYOKABRLLSFOJNTN")]
    [InlineData(17, 0, "SUTNFNWLYGHLPLYAV")]
    [InlineData(17, 1, "GCLTQKIXCQAGIYRQH")]
    [InlineData(17, 2, "TKEYCHULFATAAMJGR")]
    [InlineData(17, 3, "HRVEOEGXIJMURACWD")]
    [InlineData(17, 4, "UYOKABRLLSFOJNTNN")]
    [InlineData(18, 0, "SUTNFNWLYGHLPLYAVY")]
    [InlineData(18, 1, "GCLTQKIXCQAGIYRQHP")]
    [InlineData(18, 2, "TKEYCHULFATAAMJGRF")]
    [InlineData(18, 3, "HRVEOEGXIJMURACWDV")]
    [InlineData(18, 4, "UYOKABRLLSFOJNTNNL")]
    [InlineData(19, 0, "SUTNFNWLYGHLPLYAVYQ")]
    [InlineData(19, 1, "GCLTQKIXCQAGIYRQHPR")]
    [InlineData(19, 2, "TKEYCHULFATAAMJGRFS")]
    [InlineData(19, 3, "HRVEOEGXIJMURACWDVS")]
    [InlineData(19, 4, "UYOKABRLLSFOJNTNNLT")]
    [InlineData(20, 0, "SUTNFNWLYGHLPLYAVYQH")]
    [InlineData(20, 1, "GCLTQKIXCQAGIYRQHPRR")]
    [InlineData(20, 2, "TKEYCHULFATAAMJGRFSC")]
    [InlineData(20, 3, "HRVEOEGXIJMURACWDVSL")]
    [InlineData(20, 4, "UYOKABRLLSFOJNTNNLTV")]
    [InlineData(21, 0, "SUTNFNWLYGHLPLYAVYQHU")]
    [InlineData(21, 1, "GCLTQKIXCQAGIYRQHPRRX")]
    [InlineData(21, 2, "TKEYCHULFATAAMJGRFSCC")]
    [InlineData(21, 3, "HRVEOEGXIJMURACWDVSLF")]
    [InlineData(21, 4, "UYOKABRLLSFOJNTNNLTVI")]
    [InlineData(22, 0, "SUTNFNWLYGHLPLYAVYQHUV")]
    [InlineData(22, 1, "GCLTQKIXCQAGIYRQHPRRXC")]
    [InlineData(22, 2, "TKEYCHULFATAAMJGRFSCCI")]
    [InlineData(22, 3, "HRVEOEGXIJMURACWDVSLFO")]
    [InlineData(22, 4, "UYOKABRLLSFOJNTNNLTVIU")]
    [InlineData(23, 0, "SUTNFNWLYGHLPLYAVYQHUVY")]
    [InlineData(23, 1, "GCLTQKIXCQAGIYRQHPRRXCE")]
    [InlineData(23, 2, "TKEYCHULFATAAMJGRFSCCII")]
    [InlineData(23, 3, "HRVEOEGXIJMURACWDVSLFOM")]
    [InlineData(23, 4, "UYOKABRLLSFOJNTNNLTVIUQ")]
    [InlineData(24, 0, "SUTNFNWLYGHLPLYAVYQHUVYA")]
    [InlineData(24, 1, "GCLTQKIXCQAGIYRQHPRRXCEJ")]
    [InlineData(24, 2, "TKEYCHULFATAAMJGRFSCCIIS")]
    [InlineData(24, 3, "HRVEOEGXIJMURACWDVSLFOMC")]
    [InlineData(24, 4, "UYOKABRLLSFOJNTNNLTVIUQK")]
    [InlineData(25, 0, "SUTNFNWLYGHLPLYAVYQHUVYAR")]
    [InlineData(25, 1, "GCLTQKIXCQAGIYRQHPRRXCEJT")]
    [InlineData(25, 2, "TKEYCHULFATAAMJGRFSCCIISW")]
    [InlineData(25, 3, "HRVEOEGXIJMURACWDVSLFOMCY")]
    [InlineData(25, 4, "UYOKABRLLSFOJNTNNLTVIUQKC")]
    [InlineData(26, 0, "SUTNFNWLYGHLPLYAVYQHUVYARN")]
    [InlineData(26, 1, "GCLTQKIXCQAGIYRQHPRRXCEJTE")]
    [InlineData(26, 2, "TKEYCHULFATAAMJGRFSCCIISWU")]
    [InlineData(26, 3, "HRVEOEGXIJMURACWDVSLFOMCYL")]
    [InlineData(26, 4, "UYOKABRLLSFOJNTNNLTVIUQKCC")]
    [InlineData(27, 0, "SUTNFNWLYGHLPLYAVYQHUVYARNX")]
    [InlineData(27, 1, "GCLTQKIXCQAGIYRQHPRRXCEJTET")]
    [InlineData(27, 2, "TKEYCHULFATAAMJGRFSCCIISWUQ")]
    [InlineData(27, 3, "HRVEOEGXIJMURACWDVSLFOMCYLM")]
    [InlineData(27, 4, "UYOKABRLLSFOJNTNNLTVIUQKCCJ")]
    [InlineData(28, 0, "SUTNFNWLYGHLPLYAVYQHUVYARNXR")]
    [InlineData(28, 1, "GCLTQKIXCQAGIYRQHPRRXCEJTETH")]
    [InlineData(28, 2, "TKEYCHULFATAAMJGRFSCCIISWUQX")]
    [InlineData(28, 3, "HRVEOEGXIJMURACWDVSLFOMCYLMN")]
    [InlineData(28, 4, "UYOKABRLLSFOJNTNNLTVIUQKCCJE")]
    [InlineData(29, 0, "SUTNFNWLYGHLPLYAVYQHUVYARNXRN")]
    [InlineData(29, 1, "GCLTQKIXCQAGIYRQHPRRXCEJTETHU")]
    [InlineData(29, 2, "TKEYCHULFATAAMJGRFSCCIISWUQXC")]
    [InlineData(29, 3, "HRVEOEGXIJMURACWDVSLFOMCYLMNJ")]
    [InlineData(29, 4, "UYOKABRLLSFOJNTNNLTVIUQKCCJEQ")]
    [InlineData(30, 0, "SUTNFNWLYGHLPLYAVYQHUVYARNXRNC")]
    [InlineData(30, 1, "GCLTQKIXCQAGIYRQHPRRXCEJTETHUW")]
    [InlineData(30, 2, "TKEYCHULFATAAMJGRFSCCIISWUQXCR")]
    [InlineData(30, 3, "HRVEOEGXIJMURACWDVSLFOMCYLMNJM")]
    [InlineData(30, 4, "UYOKABRLLSFOJNTNNLTVIUQKCCJEQH")]
    [InlineData(31, 0, "SUTNFNWLYGHLPLYAVYQHUVYARNXRNCE")]
    [InlineData(31, 1, "GCLTQKIXCQAGIYRQHPRRXCEJTETHUWN")]
    [InlineData(31, 2, "TKEYCHULFATAAMJGRFSCCIISWUQXCRX")]
    [InlineData(31, 3, "HRVEOEGXIJMURACWDVSLFOMCYLMNJMH")]
    [InlineData(31, 4, "UYOKABRLLSFOJNTNNLTVIUQKCCJEQHQ")]
    [InlineData(32, 0, "SUTNFNWLYGHLPLYAVYQHUVYARNXRNCEL")]
    [InlineData(32, 1, "GCLTQKIXCQAGIYRQHPRRXCEJTETHUWNR")]
    [InlineData(32, 2, "TKEYCHULFATAAMJGRFSCCIISWUQXCRXY")]
    [InlineData(32, 3, "HRVEOEGXIJMURACWDVSLFOMCYLMNJMHG")]
    [InlineData(32, 4, "UYOKABRLLSFOJNTNNLTVIUQKCCJEQHQM")]
    public void SecurityTokenBuilderUseUpperCaseShouldProduceTheExpectedResult(int length, int seed, string expected)
    {
        // Given
        SecurityTokenBuilder builder = SecurityTokenBuilder
            .CreatePseudoRandom(length, seed)
            .UseUpperCase();

        // When
        string actual = builder.ToSecurityToken().ToString();

        // Then
        Assert.Equal(expected, actual);
    }

    [Theory(DisplayName = "SecurityTokenBuilder.UseDigits should produce the expected result")]
    [InlineData(16, 0, "6765158382245480")]
    [InlineData(16, 1, "2046533805022865")]
    [InlineData(16, 2, "6318027420600432")]
    [InlineData(16, 3, "2671512833476008")]
    [InlineData(16, 4, "7853006446253474")]
    [InlineData(17, 0, "67651583822454807")]
    [InlineData(17, 1, "20465338050228652")]
    [InlineData(17, 2, "63180274206004326")]
    [InlineData(17, 3, "26715128334760081")]
    [InlineData(17, 4, "78530064462534744")]
    [InlineData(18, 0, "676515838224548078")]
    [InlineData(18, 1, "204653380502286525")]
    [InlineData(18, 2, "631802742060043262")]
    [InlineData(18, 3, "267151283347600817")]
    [InlineData(18, 4, "785300644625347444")]
    [InlineData(19, 0, "6765158382245480786")]
    [InlineData(19, 1, "2046533805022865256")]
    [InlineData(19, 2, "6318027420600432626")]
    [InlineData(19, 3, "2671512833476008176")]
    [InlineData(19, 4, "7853006446253474447")]
    [InlineData(20, 0, "67651583822454807862")]
    [InlineData(20, 1, "20465338050228652566")]
    [InlineData(20, 2, "63180274206004326260")]
    [InlineData(20, 3, "26715128334760081764")]
    [InlineData(20, 4, "78530064462534744477")]
    [InlineData(21, 0, "676515838224548078627")]
    [InlineData(21, 1, "204653380502286525668")]
    [InlineData(21, 2, "631802742060043262600")]
    [InlineData(21, 3, "267151283347600817641")]
    [InlineData(21, 4, "785300644625347444773")]
    [InlineData(22, 0, "6765158382245480786277")]
    [InlineData(22, 1, "2046533805022865256680")]
    [InlineData(22, 2, "6318027420600432626003")]
    [InlineData(22, 3, "2671512833476008176415")]
    [InlineData(22, 4, "7853006446253474447737")]
    [InlineData(23, 0, "67651583822454807862778")]
    [InlineData(23, 1, "20465338050228652566801")]
    [InlineData(23, 2, "63180274206004326260032")]
    [InlineData(23, 3, "26715128334760081764154")]
    [InlineData(23, 4, "78530064462534744477376")]
    [InlineData(24, 0, "676515838224548078627780")]
    [InlineData(24, 1, "204653380502286525668013")]
    [InlineData(24, 2, "631802742060043262600326")]
    [InlineData(24, 3, "267151283347600817641540")]
    [InlineData(24, 4, "785300644625347444773763")]
    [InlineData(25, 0, "6765158382245480786277806")]
    [InlineData(25, 1, "2046533805022865256680137")]
    [InlineData(25, 2, "6318027420600432626003268")]
    [InlineData(25, 3, "2671512833476008176415408")]
    [InlineData(25, 4, "7853006446253474447737630")]
    [InlineData(26, 0, "67651583822454807862778064")]
    [InlineData(26, 1, "20465338050228652566801371")]
    [InlineData(26, 2, "63180274206004326260032687")]
    [InlineData(26, 3, "26715128334760081764154084")]
    [InlineData(26, 4, "78530064462534744477376300")]
    [InlineData(27, 0, "676515838224548078627780648")]
    [InlineData(27, 1, "204653380502286525668013717")]
    [InlineData(27, 2, "631802742060043262600326875")]
    [InlineData(27, 3, "267151283347600817641540844")]
    [InlineData(27, 4, "785300644625347444773763003")]
    [InlineData(28, 0, "6765158382245480786277806486")]
    [InlineData(28, 1, "2046533805022865256680137172")]
    [InlineData(28, 2, "6318027420600432626003268758")]
    [InlineData(28, 3, "2671512833476008176415408444")]
    [InlineData(28, 4, "7853006446253474447737630031")]
    [InlineData(29, 0, "67651583822454807862778064864")]
    [InlineData(29, 1, "20465338050228652566801371727")]
    [InlineData(29, 2, "63180274206004326260032687580")]
    [InlineData(29, 3, "26715128334760081764154084443")]
    [InlineData(29, 4, "78530064462534744477376300315")]
    [InlineData(30, 0, "676515838224548078627780648640")]
    [InlineData(30, 1, "204653380502286525668013717277")]
    [InlineData(30, 2, "631802742060043262600326875806")]
    [InlineData(30, 3, "267151283347600817641540844434")]
    [InlineData(30, 4, "785300644625347444773763003152")]
    [InlineData(31, 0, "6765158382245480786277806486401")]
    [InlineData(31, 1, "2046533805022865256680137172775")]
    [InlineData(31, 2, "6318027420600432626003268758068")]
    [InlineData(31, 3, "2671512833476008176415408444342")]
    [InlineData(31, 4, "7853006446253474447737630031525")]
    [InlineData(32, 0, "67651583822454807862778064864014")]
    [InlineData(32, 1, "20465338050228652566801371727756")]
    [InlineData(32, 2, "63180274206004326260032687580688")]
    [InlineData(32, 3, "26715128334760081764154084443422")]
    [InlineData(32, 4, "78530064462534744477376300315254")]
    public void SecurityTokenBuilderUseDigitsShouldProduceTheExpectedResult(int length, int seed, string expected)
    {
        // Given
        SecurityTokenBuilder builder = SecurityTokenBuilder
            .CreatePseudoRandom(length, seed)
            .UseDigits();

        // When
        string actual = builder.ToSecurityToken().ToString();

        // Then
        Assert.Equal(expected, actual);
    }

    [Theory(DisplayName = "SecurityTokenBuilder.UseAlphaNumericCharacters should produce the expected result")]
    [InlineData(16, 0, "SXUImI3A7qrCMC7b")]
    [InlineData(16, 1, "pgCVOAv5gNbpt8PN")]
    [InlineData(16, 2, "Vyk8gsWBnaUbaFxr")]
    [InlineData(16, 3, "rQ0mIlp5vxEXQbf3")]
    [InlineData(16, 4, "X8IzadQBCToKxHVG")]
    [InlineData(17, 0, "SXUImI3A7qrCMC7b0")]
    [InlineData(17, 1, "pgCVOAv5gNbpt8PNr")]
    [InlineData(17, 2, "Vyk8gsWBnaUbaFxrQ")]
    [InlineData(17, 3, "rQ0mIlp5vxEXQbf3h")]
    [InlineData(17, 4, "X8IzadQBCToKxHVGH")]
    [InlineData(18, 0, "SXUImI3A7qrCMC7b08")]
    [InlineData(18, 1, "pgCVOAv5gNbpt8PNrL")]
    [InlineData(18, 2, "Vyk8gsWBnaUbaFxrQo")]
    [InlineData(18, 3, "rQ0mIlp5vxEXQbf3h0")]
    [InlineData(18, 4, "X8IzadQBCToKxHVGHC")]
    [InlineData(19, 0, "SXUImI3A7qrCMC7b08P")]
    [InlineData(19, 1, "pgCVOAv5gNbpt8PNrLQ")]
    [InlineData(19, 2, "Vyk8gsWBnaUbaFxrQoS")]
    [InlineData(19, 3, "rQ0mIlp5vxEXQbf3h0U")]
    [InlineData(19, 4, "X8IzadQBCToKxHVGHCV")]
    [InlineData(20, 0, "SXUImI3A7qrCMC7b08Pt")]
    [InlineData(20, 1, "pgCVOAv5gNbpt8PNrLQQ")]
    [InlineData(20, 2, "Vyk8gsWBnaUbaFxrQoSf")]
    [InlineData(20, 3, "rQ0mIlp5vxEXQbf3h0UD")]
    [InlineData(20, 4, "X8IzadQBCToKxHVGHCV0")]
    [InlineData(21, 0, "SXUImI3A7qrCMC7b08PtX")]
    [InlineData(21, 1, "pgCVOAv5gNbpt8PNrLQQ5")]
    [InlineData(21, 2, "Vyk8gsWBnaUbaFxrQoSff")]
    [InlineData(21, 3, "rQ0mIlp5vxEXQbf3h0UDn")]
    [InlineData(21, 4, "X8IzadQBCToKxHVGHCV0v")]
    [InlineData(22, 0, "SXUImI3A7qrCMC7b08PtXZ")]
    [InlineData(22, 1, "pgCVOAv5gNbpt8PNrLQQ5f")]
    [InlineData(22, 2, "Vyk8gsWBnaUbaFxrQoSffu")]
    [InlineData(22, 3, "rQ0mIlp5vxEXQbf3h0UDnJ")]
    [InlineData(22, 4, "X8IzadQBCToKxHVGHCV0vY")]
    [InlineData(23, 0, "SXUImI3A7qrCMC7b08PtXZ8")]
    [InlineData(23, 1, "pgCVOAv5gNbpt8PNrLQQ5fj")]
    [InlineData(23, 2, "Vyk8gsWBnaUbaFxrQoSffuu")]
    [InlineData(23, 3, "rQ0mIlp5vxEXQbf3h0UDnJE")]
    [InlineData(23, 4, "X8IzadQBCToKxHVGHCV0vYO")]
    [InlineData(24, 0, "SXUImI3A7qrCMC7b08PtXZ8b")]
    [InlineData(24, 1, "pgCVOAv5gNbpt8PNrLQQ5fjx")]
    [InlineData(24, 2, "Vyk8gsWBnaUbaFxrQoSffuuS")]
    [InlineData(24, 3, "rQ0mIlp5vxEXQbf3h0UDnJEe")]
    [InlineData(24, 4, "X8IzadQBCToKxHVGHCV0vYOA")]
    [InlineData(25, 0, "SXUImI3A7qrCMC7b08PtXZ8bQ")]
    [InlineData(25, 1, "pgCVOAv5gNbpt8PNrLQQ5fjxW")]
    [InlineData(25, 2, "Vyk8gsWBnaUbaFxrQoSffuuS2")]
    [InlineData(25, 3, "rQ0mIlp5vxEXQbf3h0UDnJEe8")]
    [InlineData(25, 4, "X8IzadQBCToKxHVGHCV0vYOAf")]
    [InlineData(26, 0, "SXUImI3A7qrCMC7b08PtXZ8bQG")]
    [InlineData(26, 1, "pgCVOAv5gNbpt8PNrLQQ5fjxWk")]
    [InlineData(26, 2, "Vyk8gsWBnaUbaFxrQoSffuuS2X")]
    [InlineData(26, 3, "rQ0mIlp5vxEXQbf3h0UDnJEe8B")]
    [InlineData(26, 4, "X8IzadQBCToKxHVGHCV0vYOAfg")]
    [InlineData(27, 0, "SXUImI3A7qrCMC7b08PtXZ8bQG4")]
    [InlineData(27, 1, "pgCVOAv5gNbpt8PNrLQQ5fjxWkW")]
    [InlineData(27, 2, "Vyk8gsWBnaUbaFxrQoSffuuS2XN")]
    [InlineData(27, 3, "rQ0mIlp5vxEXQbf3h0UDnJEe8BF")]
    [InlineData(27, 4, "X8IzadQBCToKxHVGHCV0vYOAfgw")]
    [InlineData(28, 0, "SXUImI3A7qrCMC7b08PtXZ8bQG4P")]
    [InlineData(28, 1, "pgCVOAv5gNbpt8PNrLQQ5fjxWkWs")]
    [InlineData(28, 2, "Vyk8gsWBnaUbaFxrQoSffuuS2XN4")]
    [InlineData(28, 3, "rQ0mIlp5vxEXQbf3h0UDnJEe8BFH")]
    [InlineData(28, 4, "X8IzadQBCToKxHVGHCV0vYOAfgwk")]
    [InlineData(29, 0, "SXUImI3A7qrCMC7b08PtXZ8bQG4PH")]
    [InlineData(29, 1, "pgCVOAv5gNbpt8PNrLQQ5fjxWkWsY")]
    [InlineData(29, 2, "Vyk8gsWBnaUbaFxrQoSffuuS2XN4g")]
    [InlineData(29, 3, "rQ0mIlp5vxEXQbf3h0UDnJEe8BFHw")]
    [InlineData(29, 4, "X8IzadQBCToKxHVGHCV0vYOAfgwkN")]
    [InlineData(30, 0, "SXUImI3A7qrCMC7b08PtXZ8bQG4PHe")]
    [InlineData(30, 1, "pgCVOAv5gNbpt8PNrLQQ5fjxWkWsY2")]
    [InlineData(30, 2, "Vyk8gsWBnaUbaFxrQoSffuuS2XN4gQ")]
    [InlineData(30, 3, "rQ0mIlp5vxEXQbf3h0UDnJEe8BFHwE")]
    [InlineData(30, 4, "X8IzadQBCToKxHVGHCV0vYOAfgwkNs")]
    [InlineData(31, 0, "SXUImI3A7qrCMC7b08PtXZ8bQG4PHel")]
    [InlineData(31, 1, "pgCVOAv5gNbpt8PNrLQQ5fjxWkWsY2H")]
    [InlineData(31, 2, "Vyk8gsWBnaUbaFxrQoSffuuS2XN4gQ4")]
    [InlineData(31, 3, "rQ0mIlp5vxEXQbf3h0UDnJEe8BFHwEr")]
    [InlineData(31, 4, "X8IzadQBCToKxHVGHCV0vYOAfgwkNsO")]
    [InlineData(32, 0, "SXUImI3A7qrCMC7b08PtXZ8bQG4PHelB")]
    [InlineData(32, 1, "pgCVOAv5gNbpt8PNrLQQ5fjxWkWsY2HR")]
    [InlineData(32, 2, "Vyk8gsWBnaUbaFxrQoSffuuS2XN4gQ47")]
    [InlineData(32, 3, "rQ0mIlp5vxEXQbf3h0UDnJEe8BFHwEro")]
    [InlineData(32, 4, "X8IzadQBCToKxHVGHCV0vYOAfgwkNsOE")]
    public void SecurityTokenBuilderUseAlphaNumericCharactersShouldProduceTheExpectedResult(int length, int seed, string expected)
    {
        // Given
        SecurityTokenBuilder builder = SecurityTokenBuilder
            .CreatePseudoRandom(length, seed)
            .UseAlphaNumericCharacters();

        // When
        string actual = builder.ToSecurityToken().ToString();

        // Then
        Assert.Equal(expected, actual);
    }

    [Theory(DisplayName = "SecurityTokenBuilder.UseBasicSpecialCharacters should produce the expected result")]
    [InlineData(16, 0, "^^^$@$&$&@#$%$&!")]
    [InlineData(16, 1, "@!$^%$#&!%!@#&%%")]
    [InlineData(16, 2, "^#@&!#^$@!^!!$#@")]
    [InlineData(16, 3, "#%&@$@@&##$^%!!&")]
    [InlineData(16, 4, "^&$#!!%$$^@%#$^$")]
    [InlineData(17, 0, "^^^$@$&$&@#$%$&!&")]
    [InlineData(17, 1, "@!$^%$#&!%!@#&%%@")]
    [InlineData(17, 2, "^#@&!#^$@!^!!$#@%")]
    [InlineData(17, 3, "#%&@$@@&##$^%!!&!")]
    [InlineData(17, 4, "^&$#!!%$$^@%#$^$$")]
    [InlineData(18, 0, "^^^$@$&$&@#$%$&!&&")]
    [InlineData(18, 1, "@!$^%$#&!%!@#&%%@%")]
    [InlineData(18, 2, "^#@&!#^$@!^!!$#@%@")]
    [InlineData(18, 3, "#%&@$@@&##$^%!!&!^")]
    [InlineData(18, 4, "^&$#!!%$$^@%#$^$$$")]
    [InlineData(19, 0, "^^^$@$&$&@#$%$&!&&%")]
    [InlineData(19, 1, "@!$^%$#&!%!@#&%%@%%")]
    [InlineData(19, 2, "^#@&!#^$@!^!!$#@%@^")]
    [InlineData(19, 3, "#%&@$@@&##$^%!!&!^^")]
    [InlineData(19, 4, "^&$#!!%$$^@%#$^$$$^")]
    [InlineData(20, 0, "^^^$@$&$&@#$%$&!&&%#")]
    [InlineData(20, 1, "@!$^%$#&!%!@#&%%@%%%")]
    [InlineData(20, 2, "^#@&!#^$@!^!!$#@%@^!")]
    [InlineData(20, 3, "#%&@$@@&##$^%!!&!^^$")]
    [InlineData(20, 4, "^&$#!!%$$^@%#$^$$$^&")]
    [InlineData(21, 0, "^^^$@$&$&@#$%$&!&&%#^")]
    [InlineData(21, 1, "@!$^%$#&!%!@#&%%@%%%&")]
    [InlineData(21, 2, "^#@&!#^$@!^!!$#@%@^!!")]
    [InlineData(21, 3, "#%&@$@@&##$^%!!&!^^$@")]
    [InlineData(21, 4, "^&$#!!%$$^@%#$^$$$^&#")]
    [InlineData(22, 0, "^^^$@$&$&@#$%$&!&&%#^^")]
    [InlineData(22, 1, "@!$^%$#&!%!@#&%%@%%%&!")]
    [InlineData(22, 2, "^#@&!#^$@!^!!$#@%@^!!#")]
    [InlineData(22, 3, "#%&@$@@&##$^%!!&!^^$@%")]
    [InlineData(22, 4, "^&$#!!%$$^@%#$^$$$^&#^")]
    [InlineData(23, 0, "^^^$@$&$&@#$%$&!&&%#^^&")]
    [InlineData(23, 1, "@!$^%$#&!%!@#&%%@%%%&!@")]
    [InlineData(23, 2, "^#@&!#^$@!^!!$#@%@^!!##")]
    [InlineData(23, 3, "#%&@$@@&##$^%!!&!^^$@%$")]
    [InlineData(23, 4, "^&$#!!%$$^@%#$^$$$^&#^%")]
    [InlineData(24, 0, "^^^$@$&$&@#$%$&!&&%#^^&!")]
    [InlineData(24, 1, "@!$^%$#&!%!@#&%%@%%%&!@#")]
    [InlineData(24, 2, "^#@&!#^$@!^!!$#@%@^!!##^")]
    [InlineData(24, 3, "#%&@$@@&##$^%!!&!^^$@%$!")]
    [InlineData(24, 4, "^&$#!!%$$^@%#$^$$$^&#^%$")]
    [InlineData(25, 0, "^^^$@$&$&@#$%$&!&&%#^^&!%")]
    [InlineData(25, 1, "@!$^%$#&!%!@#&%%@%%%&!@#^")]
    [InlineData(25, 2, "^#@&!#^$@!^!!$#@%@^!!##^&")]
    [InlineData(25, 3, "#%&@$@@&##$^%!!&!^^$@%$!&")]
    [InlineData(25, 4, "^&$#!!%$$^@%#$^$$$^&#^%$!")]
    [InlineData(26, 0, "^^^$@$&$&@#$%$&!&&%#^^&!%$")]
    [InlineData(26, 1, "@!$^%$#&!%!@#&%%@%%%&!@#^@")]
    [InlineData(26, 2, "^#@&!#^$@!^!!$#@%@^!!##^&^")]
    [InlineData(26, 3, "#%&@$@@&##$^%!!&!^^$@%$!&$")]
    [InlineData(26, 4, "^&$#!!%$$^@%#$^$$$^&#^%$!!")]
    [InlineData(27, 0, "^^^$@$&$&@#$%$&!&&%#^^&!%$&")]
    [InlineData(27, 1, "@!$^%$#&!%!@#&%%@%%%&!@#^@^")]
    [InlineData(27, 2, "^#@&!#^$@!^!!$#@%@^!!##^&^%")]
    [InlineData(27, 3, "#%&@$@@&##$^%!!&!^^$@%$!&$$")]
    [InlineData(27, 4, "^&$#!!%$$^@%#$^$$$^&#^%$!!#")]
    [InlineData(28, 0, "^^^$@$&$&@#$%$&!&&%#^^&!%$&%")]
    [InlineData(28, 1, "@!$^%$#&!%!@#&%%@%%%&!@#^@^#")]
    [InlineData(28, 2, "^#@&!#^$@!^!!$#@%@^!!##^&^%&")]
    [InlineData(28, 3, "#%&@$@@&##$^%!!&!^^$@%$!&$$$")]
    [InlineData(28, 4, "^&$#!!%$$^@%#$^$$$^&#^%$!!#@")]
    [InlineData(29, 0, "^^^$@$&$&@#$%$&!&&%#^^&!%$&%$")]
    [InlineData(29, 1, "@!$^%$#&!%!@#&%%@%%%&!@#^@^#^")]
    [InlineData(29, 2, "^#@&!#^$@!^!!$#@%@^!!##^&^%&!")]
    [InlineData(29, 3, "#%&@$@@&##$^%!!&!^^$@%$!&$$$#")]
    [InlineData(29, 4, "^&$#!!%$$^@%#$^$$$^&#^%$!!#@%")]
    [InlineData(30, 0, "^^^$@$&$&@#$%$&!&&%#^^&!%$&%$!")]
    [InlineData(30, 1, "@!$^%$#&!%!@#&%%@%%%&!@#^@^#^&")]
    [InlineData(30, 2, "^#@&!#^$@!^!!$#@%@^!!##^&^%&!%")]
    [InlineData(30, 3, "#%&@$@@&##$^%!!&!^^$@%$!&$$$#$")]
    [InlineData(30, 4, "^&$#!!%$$^@%#$^$$$^&#^%$!!#@%#")]
    [InlineData(31, 0, "^^^$@$&$&@#$%$&!&&%#^^&!%$&%$!@")]
    [InlineData(31, 1, "@!$^%$#&!%!@#&%%@%%%&!@#^@^#^&$")]
    [InlineData(31, 2, "^#@&!#^$@!^!!$#@%@^!!##^&^%&!%&")]
    [InlineData(31, 3, "#%&@$@@&##$^%!!&!^^$@%$!&$$$#$#")]
    [InlineData(31, 4, "^&$#!!%$$^@%#$^$$$^&#^%$!!#@%#%")]
    [InlineData(32, 0, "^^^$@$&$&@#$%$&!&&%#^^&!%$&%$!@$")]
    [InlineData(32, 1, "@!$^%$#&!%!@#&%%@%%%&!@#^@^#^&$^")]
    [InlineData(32, 2, "^#@&!#^$@!^!!$#@%@^!!##^&^%&!%&&")]
    [InlineData(32, 3, "#%&@$@@&##$^%!!&!^^$@%$!&$$$#$#@")]
    [InlineData(32, 4, "^&$#!!%$$^@%#$^$$$^&#^%$!!#@%#%$")]
    public void SecurityTokenBuilderUseBasicSpecialCharactersShouldProduceTheExpectedResult(int length, int seed, string expected)
    {
        // Given
        SecurityTokenBuilder builder = SecurityTokenBuilder
            .CreatePseudoRandom(length, seed)
            .UseBasicSpecialCharacters();

        // When
        string actual = builder.ToSecurityToken().ToString();

        // Then
        Assert.Equal(expected, actual);
    }

    [Theory(DisplayName = "SecurityTokenBuilder.UseExtendedSpecialCharacters should produce the expected result")]
    [InlineData(16, 0, "<.>]&]~=|(){;{|!")]
    [InlineData(16, 1, "*${>\"=_`$;!*)|\'\"")]
    [InlineData(16, 2, ">-^|$),=&!>!!}+(")]
    [InlineData(16, 3, ")\'?&]^*`_+}.\'!#~")]
    [InlineData(16, 4, ".|]-!@\'={>*:+],[")]
    [InlineData(17, 0, "<.>]&]~=|(){;{|!?")]
    [InlineData(17, 1, "*${>\"=_`$;!*)|\'\"(")]
    [InlineData(17, 2, ">-^|$),=&!>!!}+(\'")]
    [InlineData(17, 3, ")\'?&]^*`_+}.\'!#~$")]
    [InlineData(17, 4, ".|]-!@\'={>*:+],[[")]
    [InlineData(18, 0, "<.>]&]~=|(){;{|!?|")]
    [InlineData(18, 1, "*${>\"=_`$;!*)|\'\"(;")]
    [InlineData(18, 2, ">-^|$),=&!>!!}+(\'*")]
    [InlineData(18, 3, ")\'?&]^*`_+}.\'!#~$?")]
    [InlineData(18, 4, ".|]-!@\'={>*:+],[[{")]
    [InlineData(19, 0, "<.>]&]~=|(){;{|!?|\"")]
    [InlineData(19, 1, "*${>\"=_`$;!*)|\'\"(;\'")]
    [InlineData(19, 2, ">-^|$),=&!>!!}+(\'*<")]
    [InlineData(19, 3, ")\'?&]^*`_+}.\'!#~$?>")]
    [InlineData(19, 4, ".|]-!@\'={>*:+],[[{,")]
    [InlineData(20, 0, "<.>]&]~=|(){;{|!?|\")")]
    [InlineData(20, 1, "*${>\"=_`$;!*)|\'\"(;\'\'")]
    [InlineData(20, 2, ">-^|$),=&!>!!}+(\'*<#")]
    [InlineData(20, 3, ")\'?&]^*`_+}.\'!#~$?>{")]
    [InlineData(20, 4, ".|]-!@\'={>*:+],[[{,?")]
    [InlineData(21, 0, "<.>]&]~=|(){;{|!?|\").")]
    [InlineData(21, 1, "*${>\"=_`$;!*)|\'\"(;\'\'`")]
    [InlineData(21, 2, ">-^|$),=&!>!!}+(\'*<##")]
    [InlineData(21, 3, ")\'?&]^*`_+}.\'!#~$?>{&")]
    [InlineData(21, 4, ".|]-!@\'={>*:+],[[{,?_")]
    [InlineData(22, 0, "<.>]&]~=|(){;{|!?|\").?")]
    [InlineData(22, 1, "*${>\"=_`$;!*)|\'\"(;\'\'`#")]
    [InlineData(22, 2, ">-^|$),=&!>!!}+(\'*<##_")]
    [InlineData(22, 3, ")\'?&]^*`_+}.\'!#~$?>{&:")]
    [InlineData(22, 4, ".|]-!@\'={>*:+],[[{,?_.")]
    [InlineData(23, 0, "<.>]&]~=|(){;{|!?|\").?|")]
    [InlineData(23, 1, "*${>\"=_`$;!*)|\'\"(;\'\'`#%")]
    [InlineData(23, 2, ">-^|$),=&!>!!}+(\'*<##__")]
    [InlineData(23, 3, ")\'?&]^*`_+}.\'!#~$?>{&:}")]
    [InlineData(23, 4, ".|]-!@\'={>*:+],[[{,?_.\"")]
    [InlineData(24, 0, "<.>]&]~=|(){;{|!?|\").?|@")]
    [InlineData(24, 1, "*${>\"=_`$;!*)|\'\"(;\'\'`#%+")]
    [InlineData(24, 2, ">-^|$),=&!>!!}+(\'*<##__<")]
    [InlineData(24, 3, ")\'?&]^*`_+}.\'!#~$?>{&:}#")]
    [InlineData(24, 4, ".|]-!@\'={>*:+],[[{,?_.\"=")]
    [InlineData(25, 0, "<.>]&]~=|(){;{|!?|\").?|@\'")]
    [InlineData(25, 1, "*${>\"=_`$;!*)|\'\"(;\'\'`#%+,")]
    [InlineData(25, 2, ">-^|$),=&!>!!}+(\'*<##__</")]
    [InlineData(25, 3, ")\'?&]^*`_+}.\'!#~$?>{&:}#|")]
    [InlineData(25, 4, ".|]-!@\'={>*:+],[[{,?_.\"=#")]
    [InlineData(26, 0, "<.>]&]~=|(){;{|!?|\").?|@\'[")]
    [InlineData(26, 1, "*${>\"=_`$;!*)|\'\"(;\'\'`#%+,^")]
    [InlineData(26, 2, ">-^|$),=&!>!!}+(\'*<##__</.")]
    [InlineData(26, 3, ")\'?&]^*`_+}.\'!#~$?>{&:}#|{")]
    [InlineData(26, 4, ".|]-!@\'={>*:+],[[{,?_.\"=#$")]
    [InlineData(27, 0, "<.>]&]~=|(){;{|!?|\").?|@\'[~")]
    [InlineData(27, 1, "*${>\"=_`$;!*)|\'\"(;\'\'`#%+,^,")]
    [InlineData(27, 2, ">-^|$),=&!>!!}+(\'*<##__</.\"")]
    [InlineData(27, 3, ")\'?&]^*`_+}.\'!#~$?>{&:}#|{}")]
    [InlineData(27, 4, ".|]-!@\'={>*:+],[[{,?_.\"=#$+")]
    [InlineData(28, 0, "<.>]&]~=|(){;{|!?|\").?|@\'[~\'")]
    [InlineData(28, 1, "*${>\"=_`$;!*)|\'\"(;\'\'`#%+,^,)")]
    [InlineData(28, 2, ">-^|$),=&!>!!}+(\'*<##__</.\"~")]
    [InlineData(28, 3, ")\'?&]^*`_+}.\'!#~$?>{&:}#|{}[")]
    [InlineData(28, 4, ".|]-!@\'={>*:+],[[{,?_.\"=#$+^")]
    [InlineData(29, 0, "<.>]&]~=|(){;{|!?|\").?|@\'[~\'[")]
    [InlineData(29, 1, "*${>\"=_`$;!*)|\'\"(;\'\'`#%+,^,).")]
    [InlineData(29, 2, ">-^|$),=&!>!!}+(\'*<##__</.\"~$")]
    [InlineData(29, 3, ")\'?&]^*`_+}.\'!#~$?>{&:}#|{}[+")]
    [InlineData(29, 4, ".|]-!@\'={>*:+],[[{,?_.\"=#$+^\"")]
    [InlineData(30, 0, "<.>]&]~=|(){;{|!?|\").?|@\'[~\'[#")]
    [InlineData(30, 1, "*${>\"=_`$;!*)|\'\"(;\'\'`#%+,^,)./")]
    [InlineData(30, 2, ">-^|$),=&!>!!}+(\'*<##__</.\"~$\'")]
    [InlineData(30, 3, ")\'?&]^*`_+}.\'!#~$?>{&:}#|{}[+}")]
    [InlineData(30, 4, ".|]-!@\'={>*:+],[[{,?_.\"=#$+^\")")]
    [InlineData(31, 0, "<.>]&]~=|(){;{|!?|\").?|@\'[~\'[#^")]
    [InlineData(31, 1, "*${>\"=_`$;!*)|\'\"(;\'\'`#%+,^,)./]")]
    [InlineData(31, 2, ">-^|$),=&!>!!}+(\'*<##__</.\"~$\'~")]
    [InlineData(31, 3, ")\'?&]^*`_+}.\'!#~$?>{&:}#|{}[+})")]
    [InlineData(31, 4, ".|]-!@\'={>*:+],[[{,?_.\"=#$+^\")\"")]
    [InlineData(32, 0, "<.>]&]~=|(){;{|!?|\").?|@\'[~\'[#^{")]
    [InlineData(32, 1, "*${>\"=_`$;!*)|\'\"(;\'\'`#%+,^,)./]<")]
    [InlineData(32, 2, ">-^|$),=&!>!!}+(\'*<##__</.\"~$\'~|")]
    [InlineData(32, 3, ")\'?&]^*`_+}.\'!#~$?>{&:}#|{}[+})*")]
    [InlineData(32, 4, ".|]-!@\'={>*:+],[[{,?_.\"=#$+^\")\"}")]
    public void SecurityTokenBuilderUseExtendedSpecialCharactersShouldProduceTheExpectedResult(int length, int seed, string expected)
    {
        // Given
        SecurityTokenBuilder builder = SecurityTokenBuilder
            .CreatePseudoRandom(length, seed)
            .UseExtendedSpecialCharacters();

        // When
        string actual = builder.ToSecurityToken().ToString();

        // Then
        Assert.Equal(expected, actual);
    }

    [Theory(DisplayName = "SecurityTokenBuilder should produce the expected result")]
    [InlineData(16, 0, "^{)ZtZ<P~zBR6R`c")]
    [InlineData(16, 1, "xkR)9OG.j7cxD|@8")]
    [InlineData(16, 2, ")Lp`kC-Pub)caVJz")]
    [InlineData(16, 3, "B#:s0qx?GJU=#ch<")]
    [InlineData(16, 4, "=|0Mbf#PR*w2JZ_X")]
    [InlineData(17, 0, "^{)ZtZ<P~zBR6R`c:")]
    [InlineData(17, 1, "xkR)9OG.j7cxD|@8A")]
    [InlineData(17, 2, ")Lp`kC-Pub)caVJz$")]
    [InlineData(17, 3, "B#:s0qx?GJU=#ch<l")]
    [InlineData(17, 4, "=|0Mbf#PR*w2JZ_XY")]
    [InlineData(18, 0, "^{)ZtZ<P~zBR6R`c:|")]
    [InlineData(18, 1, "xkR)9OG.j7cxD|@8A5")]
    [InlineData(18, 2, ")Lp`kC-Pub)caVJz$v")]
    [InlineData(18, 3, "B#:s0qx?GJU=#ch<l]")]
    [InlineData(18, 4, "=|0Mbf#PR*w2JZ_XYS")]
    [InlineData(19, 0, "^{)ZtZ<P~zBR6R`c:|!")]
    [InlineData(19, 1, "xkR)9OG.j7cxD|@8A5$")]
    [InlineData(19, 2, ")Lp`kC-Pub)caVJz$v&")]
    [InlineData(19, 3, "B#:s0qx?GJU=#ch<l](")]
    [InlineData(19, 4, "=|0Mbf#PR*w2JZ_XYS+")]
    [InlineData(20, 0, "^{)ZtZ<P~zBR6R`c:|!D")]
    [InlineData(20, 1, "xkR)9OG.j7cxD|@8A5$$")]
    [InlineData(20, 2, ")Lp`kC-Pub)caVJz$v&i")]
    [InlineData(20, 3, "B#:s0qx?GJU=#ch<l](S")]
    [InlineData(20, 4, "=|0Mbf#PR*w2JZ_XYS+:")]
    [InlineData(21, 0, "^{)ZtZ<P~zBR6R`c:|!D=")]
    [InlineData(21, 1, "xkR)9OG.j7cxD|@8A5$$?")]
    [InlineData(21, 2, ")Lp`kC-Pub)caVJz$v&ih")]
    [InlineData(21, 3, "B#:s0qx?GJU=#ch<l](Su")]
    [InlineData(21, 4, "=|0Mbf#PR*w2JZ_XYS+:G")]
    [InlineData(22, 0, "^{)ZtZ<P~zBR6R`c:|!D=[")]
    [InlineData(22, 1, "xkR)9OG.j7cxD|@8A5$$?i")]
    [InlineData(22, 2, ")Lp`kC-Pub)caVJz$v&ihF")]
    [InlineData(22, 3, "B#:s0qx?GJU=#ch<l](Su2")]
    [InlineData(22, 4, "=|0Mbf#PR*w2JZ_XYS+:G}")]
    [InlineData(23, 0, "^{)ZtZ<P~zBR6R`c:|!D=[|")]
    [InlineData(23, 1, "xkR)9OG.j7cxD|@8A5$$?io")]
    [InlineData(23, 2, ")Lp`kC-Pub)caVJz$v&ihFE")]
    [InlineData(23, 3, "B#:s0qx?GJU=#ch<l](Su2U")]
    [InlineData(23, 4, "=|0Mbf#PR*w2JZ_XYS+:G}!")]
    [InlineData(24, 0, "^{)ZtZ<P~zBR6R`c:|!D=[|d")]
    [InlineData(24, 1, "xkR)9OG.j7cxD|@8A5$$?ioJ")]
    [InlineData(24, 2, ")Lp`kC-Pub)caVJz$v&ihFE&")]
    [InlineData(24, 3, "B#:s0qx?GJU=#ch<l](Su2Uh")]
    [InlineData(24, 4, "=|0Mbf#PR*w2JZ_XYS+:G}!N")]
    [InlineData(25, 0, "^{)ZtZ<P~zBR6R`c:|!D=[|d$")]
    [InlineData(25, 1, "xkR)9OG.j7cxD|@8A5$$?ioJ-")]
    [InlineData(25, 2, ")Lp`kC-Pub)caVJz$v&ihFE&\'")]
    [InlineData(25, 3, "B#:s0qx?GJU=#ch<l](Su2Uh|")]
    [InlineData(25, 4, "=|0Mbf#PR*w2JZ_XYS+:G}!Ni")]
    [InlineData(26, 0, "^{)ZtZ<P~zBR6R`c:|!D=[|d$W")]
    [InlineData(26, 1, "xkR)9OG.j7cxD|@8A5$$?ioJ-p")]
    [InlineData(26, 2, ")Lp`kC-Pub)caVJz$v&ihFE&\'=")]
    [InlineData(26, 3, "B#:s0qx?GJU=#ch<l](Su2Uh|Q")]
    [InlineData(26, 4, "=|0Mbf#PR*w2JZ_XYS+:G}!Nij")]
    [InlineData(27, 0, "^{)ZtZ<P~zBR6R`c:|!D=[|d$W,")]
    [InlineData(27, 1, "xkR)9OG.j7cxD|@8A5$$?ioJ-p+")]
    [InlineData(27, 2, ")Lp`kC-Pub)caVJz$v&ihFE&\'=8")]
    [InlineData(27, 3, "B#:s0qx?GJU=#ch<l](Su2Uh|QV")]
    [InlineData(27, 4, "=|0Mbf#PR*w2JZ_XYS+:G}!NijI")]
    [InlineData(28, 0, "^{)ZtZ<P~zBR6R`c:|!D=[|d$W,@")]
    [InlineData(28, 1, "xkR)9OG.j7cxD|@8A5$$?ioJ-p+C")]
    [InlineData(28, 2, ")Lp`kC-Pub)caVJz$v&ihFE&\'=8,")]
    [InlineData(28, 3, "B#:s0qx?GJU=#ch<l](Su2Uh|QVY")]
    [InlineData(28, 4, "=|0Mbf#PR*w2JZ_XYS+:G}!NijIp")]
    [InlineData(29, 0, "^{)ZtZ<P~zBR6R`c:|!D=[|d$W,@Y")]
    [InlineData(29, 1, "xkR)9OG.j7cxD|@8A5$$?ioJ-p+C{")]
    [InlineData(29, 2, ")Lp`kC-Pub)caVJz$v&ihFE&\'=8,j")]
    [InlineData(29, 3, "B#:s0qx?GJU=#ch<l](Su2Uh|QVYI")]
    [InlineData(29, 4, "=|0Mbf#PR*w2JZ_XYS+:G}!NijIp8")]
    [InlineData(30, 0, "^{)ZtZ<P~zBR6R`c:|!D=[|d$W,@Yh")]
    [InlineData(30, 1, "xkR)9OG.j7cxD|@8A5$$?ioJ-p+C{\"")]
    [InlineData(30, 2, ")Lp`kC-Pub)caVJz$v&ihFE&\'=8,j#")]
    [InlineData(30, 3, "B#:s0qx?GJU=#ch<l](Su2Uh|QVYIU")]
    [InlineData(30, 4, "=|0Mbf#PR*w2JZ_XYS+:G}!NijIp8C")]
    [InlineData(31, 0, "^{)ZtZ<P~zBR6R`c:|!D=[|d$W,@Yhr")]
    [InlineData(31, 1, "xkR)9OG.j7cxD|@8A5$$?ioJ-p+C{\"Z")]
    [InlineData(31, 2, ")Lp`kC-Pub)caVJz$v&ihFE&\'=8,j#,")]
    [InlineData(31, 3, "B#:s0qx?GJU=#ch<l](Su2Uh|QVYIUB")]
    [InlineData(31, 4, "=|0Mbf#PR*w2JZ_XYS+:G}!NijIp8C9")]
    [InlineData(32, 0, "^{)ZtZ<P~zBR6R`c:|!D=[|d$W,@YhrQ")]
    [InlineData(32, 1, "xkR)9OG.j7cxD|@8A5$$?ioJ-p+C{\"Z%")]
    [InlineData(32, 2, ")Lp`kC-Pub)caVJz$v&ihFE&\'=8,j#,`")]
    [InlineData(32, 3, "B#:s0qx?GJU=#ch<l](Su2Uh|QVYIUBw")]
    [InlineData(32, 4, "=|0Mbf#PR*w2JZ_XYS+:G}!NijIp8C9V")]
    public void SecurityTokenBuilderShouldProduceTheExpectedResult(int length, int seed, string expected)
    {
        // Given
        SecurityTokenBuilder builder = SecurityTokenBuilder
            .CreatePseudoRandom(length, seed)
            .UseAlphaNumericCharacters()
            .UseExtendedSpecialCharacters();

        // When
        string actual = builder.ToSecurityToken().ToString();

        // Then
        Assert.Equal(expected, actual);
    }
}
