// Copyright Â© 2020 ONIXLabs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using System.Reflection;
using Xunit.Sdk;

namespace OnixLabs.Numerics.UnitTests.Data;

public sealed class BigDecimalArithmeticPowDataAttribute : DataAttribute
{
    private static readonly (decimal Value, int Exponent, decimal Expected)[] Data =
    [
        (0m, 1, 0m),
        (0m, 2, 0m),
        (0m, 3, 0m),
        (0m, 4, 0m),
        (0m, 5, 0m),
        (0m, 10, 0m),
        (0m, 28, 0m),
        (1m, 1, 1m),
        (1m, 2, 1m),
        (1m, 3, 1m),
        (1m, 4, 1m),
        (1m, 5, 1m),
        (1m, 10, 1m),
        (1m, 28, 1m),
        (2m, 1, 2m),
        (2m, 2, 4m),
        (2m, 3, 8m),
        (2m, 4, 16m),
        (2m, 5, 32m),
        (2m, 10, 1024m),
        (3m, 1, 3m),
        (3m, 2, 9m),
        (3m, 3, 27m),
        (3m, 4, 81m),
        (3m, 5, 243m),
        (3m, 10, 59049m),
        (4m, 1, 4m),
        (4m, 2, 16m),
        (4m, 3, 64m),
        (4m, 4, 256m),
        (4m, 5, 1024m),
        (4m, 10, 1048576m),
        (5m, 1, 5m),
        (5m, 2, 25m),
        (5m, 3, 125m),
        (5m, 4, 625m),
        (5m, 5, 3125m),
        (5m, 10, 9765625m),
        (10m, 1, 10m),
        (10m, 2, 100m),
        (10m, 3, 1000m),
        (10m, 4, 10000m),
        (10m, 5, 100000m),
        (10m, 10, 10000000000m),
        (10m, 28, 10000000000000000000000000000m),
        (-1m, 1, -1m),
        (-1m, 2, -1m),
        (-1m, 3, -1m),
        (-1m, 4, -1m),
        (-1m, 5, -1m),
        (-1m, 10, -1m),
        (-1m, 28, -1m),
        (-2m, 1, -2m),
        (-2m, 2, -4m),
        (-2m, 3, -8m),
        (-2m, 4, -16m),
        (-2m, 5, -32m),
        (-2m, 10, -1024m),
        (-3m, 1, -3m),
        (-3m, 2, -9m),
        (-3m, 3, -27m),
        (-3m, 4, -81m),
        (-3m, 5, -243m),
        (-3m, 10, -59049m),
        (-4m, 1, -4m),
        (-4m, 2, -16m),
        (-4m, 3, -64m),
        (-4m, 4, -256m),
        (-4m, 5, -1024m),
        (-4m, 10, -1048576m),
        (-5m, 1, -5m),
        (-5m, 2, -25m),
        (-5m, 3, -125m),
        (-5m, 4, -625m),
        (-5m, 5, -3125m),
        (-5m, 10, -9765625m),
        (-10m, 1, -10m),
        (-10m, 2, -100m),
        (-10m, 3, -1000m),
        (-10m, 4, -10000m),
        (-10m, 5, -100000m),
        (-10m, 10, -10000000000m),
        (-10m, 28, -10000000000000000000000000000m),
        (1m, -1, 1m),
        (1m, -2, 1m),
        (1m, -3, 1m),
        (1m, -4, 1m),
        (1m, -5, 1m),
        (1m, -10, 1m),
        (1m, -28, 1m),
        (2.0m, -1, 0.5m),
        (2.00m, -1, 0.50m),
        (2.000m, -1, 0.500m),
        (2.0000m, -1, 0.5000m),
        (2.00000m, -1, 0.50000m),
        (2.0000000000m, -1, 0.5000000000m),
        (2.0000000000000000000000000000m, -1, 0.5000000000000000000000000000m),
        (2.0m, -2, 0.2m),
        (2.00m, -2, 0.25m),
        (2.000m, -2, 0.250m),
        (2.0000m, -2, 0.2500m),
        (2.00000m, -2, 0.25000m),
        (2.0000000000m, -2, 0.2500000000m),
        (2.0000000000000000000000000000m, -2, 0.2500000000000000000000000000m),
        (2.0m, -3, 0.1m),
        (2.00m, -3, 0.12m),
        (2.000m, -3, 0.125m),
        (2.0000m, -3, 0.1250m),
        (2.00000m, -3, 0.12500m),
        (2.0000000000m, -3, 0.1250000000m),
        (2.000000000000000000000000000000m, -3, 0.1250000000000000000000000000m),
        (2.0m, -4, 0.1m),
        (2.00m, -4, 0.06m),
        (2.000m, -4, 0.062m),
        (2.0000m, -4, 0.0625m),
        (2.00000m, -4, 0.06250m),
        (2.0000000000m, -4, 0.0625000000m),
        (2.0000000000000000000000000000m, -4, 0.0625000000000000000000000000m),
        (2.0m, -5, 0.0m),
        (2.00m, -5, 0.03m),
        (2.000m, -5, 0.031m),
        (2.0000m, -5, 0.0312m),
        (2.00000m, -5, 0.03125m),
        (2.0000000000m, -5, 0.0312500000m),
        (2.0000000000000000000000000000m, -5, 0.0312500000000000000000000000m),
        (2.0m, -10, 0.0m),
        (2.00m, -10, 0.00m),
        (2.000m, -10, 0.001m),
        (2.0000m, -10, 0.0010m),
        (2.00000m, -10, 0.00098m),
        (2.0000000000m, -10, 0.0009765625m),
        (2.0000000000000000000000000000m, -10, 0.0009765625000000000000000000m),
        (3.0m, -1, 0.3m),
        (3.00m, -1, 0.33m),
        (3.000m, -1, 0.333m),
        (3.0000m, -1, 0.3333m),
        (3.00000m, -1, 0.33333m),
        (3.0000000000m, -1, 0.3333333333m),
        (3.0000000000000000000000000000m, -1, 0.3333333333333333333333333333m),
        (3.0m, -2, 0.1m),
        (3.00m, -2, 0.11m),
        (3.000m, -2, 0.111m),
        (3.0000m, -2, 0.1111m),
        (3.00000m, -2, 0.11111m),
        (3.0000000000m, -2, 0.1111111111m),
        (3.0000000000000000000000000000m, -2, 0.1111111111111111111111111111m),
        (3.0m, -3, 0.0m),
        (3.00m, -3, 0.04m),
        (3.000m, -3, 0.037m),
        (3.0000m, -3, 0.0370m),
        (3.00000m, -3, 0.03704m),
        (3.0000000000m, -3, 0.0370370370m),
        (3.0000000000000000000000000000m, -3, 0.0370370370370370370370370370m),
        (3.0m, -4, 0.0m),
        (3.00m, -4, 0.01m),
        (3.000m, -4, 0.012m),
        (3.0000m, -4, 0.0123m),
        (3.00000m, -4, 0.01235m),
        (3.0000000000m, -4, 0.0123456790m),
        (3.0000000000000000000000000000m, -4, 0.0123456790123456790123456790m),
        (3.0m, -5, 0.0m),
        (3.00m, -5, 0.00m),
        (3.000m, -5, 0.004m),
        (3.0000m, -5, 0.0041m),
        (3.00000m, -5, 0.00412m),
        (3.0000000000m, -5, 0.0041152263m),
        (3.000000000000000000000000000000m, -5, 0.004115226337448559670781893004m),
        (3.0m, -10, 0.0m),
        (3.00m, -10, 0.00m),
        (3.000m, -10, 0.000m),
        (3.0000m, -10, 0.0000m),
        (3.00000m, -10, 0.00002m),
        (3.0000000000m, -10, 0.0000169351m),
        (3.0000000000000000000000000000m, -10, 0.000016935087808430286711036597m)
    ];

    public override IEnumerable<object[]> GetData(MethodInfo testMethod)
    {
        foreach ((decimal value, int exponent, decimal expected) in Data) yield return [value, exponent, expected];
    }
}
