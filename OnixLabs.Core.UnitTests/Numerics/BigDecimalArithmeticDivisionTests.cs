// Copyright Â© 2020 ONIXLabs
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//    http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using System;
using System.Collections.Generic;
using System.Reflection;
using OnixLabs.Core.Numerics;
using Xunit;
using Xunit.Sdk;

namespace OnixLabs.Core.UnitTests.Numerics;

public sealed class BigDecimalArithmeticDivisionTests
{
    [DivideData]
    [Theory(DisplayName = "BigDecimal.Divide should produce the expected result")]
    public void BigDecimalDivideShouldProduceExpectedResult(decimal left, decimal right, MidpointRounding mode)
    {
        // Given
        decimal expected = decimal.Round(left / right, left.Scale, mode);

        // When
        BigDecimal actual = BigDecimal.Divide(left, right, mode);

        // Then
        Assert.Equal(expected, actual);
    }

    private sealed class DivideDataAttribute : DataAttribute
    {
        private static readonly (decimal Left, decimal Right)[] Data =
        [
            (0m, 1m),
            (1m, 1m),
            (2m, 1m),
            (10m, 2m),
            (10m, 5m),
            (1.0m, 2m),
            (1.0m, 3m),
            (1.00m, 4m),
            (1.0m, 5m),
            (1.000m, 8m),
            (1.0m, 10m),
            (1.00m, 100m),
            (1.0000000000m, 10000000000m),
            (-67.02656978983491m, 7.312027932767307m),
            (-88.7187603079375m, 15.24075066597933m),
            (-64.13553138091264m, 11.906410850971117m),
            (80.39590200927972m, -91.20639430533468m),
            (-0.14889931491384178m, 61.37693523240115m),
            (64.95418990763555m, -75.58326846189513m),
            (9.111485701964995m, -79.85922129422886m),
            (65.19528537862527m, -90.1121464027905m),
            (72.15239760473023m, -69.41227637250849m),
            (-66.78147091866593m, 12.063989948955678m),
            (97.89630699777744m, -32.906237216839116m),
            (-4.251610625873958m, 81.61408209478668m),
            (27.7917254235463m, -50.76710946874087m),
            (11.32613901355085m, -7.511222050621291m),
            (10.731330834942444m, -35.821610588232446m),
            (44.78178135798253m, -16.92538136827858m),
            (-68.73532559029019m, 32.945793059923915m),
            (21.453856848397923m, -39.296937688045944m),
            (36.466137066168955m, -80.44851575181693m),
            (-80.5050399045975m, 85.37408166489166m),
            (-14.042147167570162m, 67.49436109967232m),
            (74.0476392396645m, -34.85357081344122m),
            (7.49643235706735m, -53.801398669167654m),
            (2.8454836439035236m, -85.97525042180685m),
            (76.84201225346756m, -74.6040434209688m),
            (-93.60028407262145m, 31.696965771256412m),
            (-40.67903420384324m, 23.99611377253984m),
            (-63.21945459519659m, 7.571811997718225m),
            (-94.10389535916713m, 69.82030350759739m),
            (80.66440500497518m, -13.56411008392927m),
            (70.80873881291312m, -29.975237006070476m),
            (-41.795611259621346m, 18.574618372978748m),
            (28.829185152045344m, -41.75891806155829m),
            (17.51546964287819m, -75.68084427895431m),
            (-63.64312653943875m, 53.30374218446261m),
            (51.35052296094392m, -10.594369473956744m),
            (-82.82496544683025m, 15.16766539427441m),
            (93.58652705510663m, -5.549196939342416m),
            (88.72388587576116m, -40.71190695169547m),
            (-6.169083269742548m, 35.189008065502094m),
            (-84.86462724198026m, 23.414278124698495m),
            (-56.62578543850274m, 90.02969929070258m),
            (-77.00780001972949m, 15.789781987999751m),
            (10.198707606039914m, -62.547312303038474m),
            (-53.74568513625058m, 94.58135030352052m),
            (74.37761310123219m, -38.59589950616781m),
            (36.32561674433881m, -10.402529610632339m),
            (-83.25465110440075m, 34.39761508363088m),
            (-85.9317322569238m, 46.07935218983832m),
            (3.591363079100929m, -56.62060209587967m),
            (-90.79035327132755m, 67.02330325960733m),
            (14.363773495802157m, -24.92414314499076m),
            (-95.51681357605575m, 31.924217388471565m),
            (-31.280203806140648m, 93.46000511770652m),
            (-54.67006828843982m, 99.95726817035919m),
            (8.9452341147095m, -6.200572372004087m),
            (26.297699262309237m, -6.81659529091827m),
            (-72.8328018472637m, 91.96385558700318m),
            (36.63674743432775m, -8.79901739277641m),
            (95.53341889014017m, -16.189406336617328m),
            (33.030030708104995m, -92.51650416335646m),
            (4.168756955566355m, -29.45467414237757m),
            (-93.33193651189721m, 76.49078903187926m),
            (2.1486274856754584m, -47.492478906264736m),
            (-91.27633816215935m, 70.207341232433m),
            (-67.99639274664415m, 66.02184425185867m),
            (41.54662568409265m, -30.78276366917767m),
            (57.288602255954956m, -53.19038271382944m),
            (-17.99230416015464m, 83.12137772394614m),
            (4.983850279030677m, -20.896110029727698m),
            (-57.66976177372628m, 37.18932388429674m),
            (86.48733601265852m, -37.709422360610255m),
            (-90.58869712658799m, 12.018352048194568m),
            (38.59360995727356m, -45.513901731936315m),
            (8.019480853733029m, -59.41344405412641m),
            (-60.501347641900026m, 69.44982533371856m),
            (-88.95519873788206m, 80.10544685018952m),
            (-59.9510058465358m, 75.25205391830634m),
            (-88.67259188146977m, 97.2193697441155m),
            (95.3459374653864m, -40.1412039662605m),
            (-92.3816700789935m, 58.09981353224831m),
            (-54.72812872391716m, 76.77672421134862m),
            (-65.60539120187843m, 46.334840628411754m),
            (8.540685909654789m, -19.80823706724012m),
            (-79.34425060190061m, 38.95590428309593m),
            (12.83409061774191m, -77.86513832841631m),
            (-7.146838180538095m, 38.892081306621925m),
            (77.67392578041311m, -56.42596273041095m),
            (-13.349305909075081m, 7.1324291960934705m),
            (64.88759083609933m, -56.75040507537279m),
            (-27.400048530667476m, 18.816538704427444m),
            (-51.726608913744286m, 78.59289153337458m),
            (28.10808208423854m, -91.35997415299445m),
            (38.45188445594305m, -47.38335831646159m),
            (75.38804859619648m, -74.61111509165494m),
            (-99.7919910533703m, 34.28983417559569m),
            (-49.78375522865368m, 33.95360673916319m),
            (-52.97313800170663m, 34.65398957283149m),
            (82.32920392456504m, -78.23968820243807m),
            (91.80570956596327m, -21.183250769696414m),
        ];

        public override IEnumerable<object[]> GetData(MethodInfo testMethod)
        {
            foreach ((decimal left, decimal right) in Data)
            {
                foreach (MidpointRounding mode in Enum.GetValues<MidpointRounding>())
                {
                    yield return [left, right, mode];
                }
            }
        }
    }
}
