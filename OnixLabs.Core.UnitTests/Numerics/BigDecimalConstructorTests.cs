// Copyright 2020-2023 ONIXLabs
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//    http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using System;
using System.Numerics;
using OnixLabs.Core.Numerics;
using OnixLabs.Core.UnitTests.Data.Generators;
using Xunit;

namespace OnixLabs.Core.UnitTests.Numerics;

public sealed class BigDecimalConstructorTests
{
    [Theory(DisplayName = "BigDecimal should be constructable from a byte array")]
    [InlineData(0, 0)]
    [InlineData(1, 0)]
    [InlineData(1, 1)]
    [InlineData(1, 2)]
    [InlineData(1, 10)]
    [InlineData(-1, 0)]
    [InlineData(-1, 1)]
    [InlineData(-1, 2)]
    [InlineData(-1, 10)]
    [InlineData(10, 0)]
    [InlineData(10, 1)]
    [InlineData(10, 2)]
    [InlineData(10, 10)]
    [InlineData(-10, 0)]
    [InlineData(-10, 1)]
    [InlineData(-10, 2)]
    [InlineData(-10, 10)]
    [InlineData(long.MinValue, 0)]
    [InlineData(long.MinValue, 1)]
    [InlineData(long.MinValue, 2)]
    [InlineData(long.MinValue, 10)]
    [InlineData(long.MaxValue, 0)]
    [InlineData(long.MaxValue, 1)]
    [InlineData(long.MaxValue, 2)]
    [InlineData(long.MaxValue, 10)]
    [InlineData(long.MinValue, int.MaxValue)]
    [InlineData(long.MaxValue, int.MaxValue)]
    public void BigDecimalShouldBeConstructableFromByteArray(long unscaledValue, int scale)
    {
        // Given
        byte[] unscaledValueBytes = BitConverter.GetBytes(unscaledValue);
        byte[] scaleBytes = BitConverter.GetBytes(scale);
        byte[] bytes = unscaledValueBytes.ConcatenateWith(scaleBytes);

        // When
        BigDecimal value = new(bytes);

        // Then
        Assert.Equal(unscaledValue, value.UnscaledValue);
        Assert.Equal(scale, value.Scale);
    }

    [Theory(DisplayName = "BigDecimal should throw an exception when constructed with a negative scale")]
    [InlineData(0, -1)]
    [InlineData(0, int.MinValue)]
    public void BigDecimalShouldThrowExceptionWhenConstructedWithNegativeScale(long unscaledValue, int scale)
    {
        // Given
        byte[] unscaledValueBytes = BitConverter.GetBytes(unscaledValue);
        byte[] scaleBytes = BitConverter.GetBytes(scale);
        byte[] bytes = unscaledValueBytes.ConcatenateWith(scaleBytes);

        // When
        ArgumentException exception = Assert.Throws<ArgumentException>(() => new BigDecimal(bytes));

        // Then
        Assert.Equal("Scale must be greater than or equal to zero. (Parameter 'value')", exception.Message);
    }

    [Theory(DisplayName = "BigDecimal should be constructable from unscaled value and scale")]
    [InlineData(0, 0)]
    [InlineData(1, 0)]
    [InlineData(1, 1)]
    [InlineData(1, 2)]
    [InlineData(1, 10)]
    [InlineData(-1, 0)]
    [InlineData(-1, 1)]
    [InlineData(-1, 2)]
    [InlineData(-1, 10)]
    [InlineData(10, 0)]
    [InlineData(10, 1)]
    [InlineData(10, 2)]
    [InlineData(10, 10)]
    [InlineData(-10, 0)]
    [InlineData(-10, 1)]
    [InlineData(-10, 2)]
    [InlineData(-10, 10)]
    [InlineData(long.MinValue, 0)]
    [InlineData(long.MinValue, 1)]
    [InlineData(long.MinValue, 2)]
    [InlineData(long.MinValue, 10)]
    [InlineData(long.MaxValue, 0)]
    [InlineData(long.MaxValue, 1)]
    [InlineData(long.MaxValue, 2)]
    [InlineData(long.MaxValue, 10)]
    [InlineData(long.MinValue, int.MaxValue)]
    [InlineData(long.MaxValue, int.MaxValue)]
    public void BigDecimalShouldBeConstructableFromUnscaledValueAndScale(BigInteger unscaledValue, int scale)
    {
        // When
        BigDecimal value = new(unscaledValue, scale);

        // Then
        Assert.Equal(unscaledValue, value.UnscaledValue);
        Assert.Equal(scale, value.Scale);
    }

    [Theory(DisplayName = "BigDecimal should be constructable from unscaled sbyte value and scale")]
    [InlineData(sbyte.MaxValue, 0, "127")]
    [InlineData(sbyte.MaxValue, 1, "12.7")]
    [InlineData(sbyte.MaxValue, 2, "1.27")]
    [InlineData(sbyte.MaxValue, 3, "0.127")]
    [InlineData(sbyte.MaxValue, 4, "0.0127")]
    [InlineData(sbyte.MaxValue, 5, "0.00127")]
    [InlineData(sbyte.MaxValue, 6, "0.000127")]
    [InlineData(sbyte.MaxValue, 7, "0.0000127")]
    [InlineData(sbyte.MaxValue, 8, "0.00000127")]
    [InlineData(sbyte.MaxValue, 9, "0.000000127")]
    [InlineData(sbyte.MaxValue, 10, "0.0000000127")]
    [InlineData(sbyte.MaxValue, 20, "0.00000000000000000127")]
    [InlineData(sbyte.MinValue, 0, "-128")]
    [InlineData(sbyte.MinValue, 1, "-12.8")]
    [InlineData(sbyte.MinValue, 2, "-1.28")]
    [InlineData(sbyte.MinValue, 3, "-0.128")]
    [InlineData(sbyte.MinValue, 4, "-0.0128")]
    [InlineData(sbyte.MinValue, 5, "-0.00128")]
    [InlineData(sbyte.MinValue, 6, "-0.000128")]
    [InlineData(sbyte.MinValue, 7, "-0.0000128")]
    [InlineData(sbyte.MinValue, 8, "-0.00000128")]
    [InlineData(sbyte.MinValue, 9, "-0.000000128")]
    [InlineData(sbyte.MinValue, 10, "-0.0000000128")]
    [InlineData(sbyte.MinValue, 20, "-0.00000000000000000128")]
    public void BigDecimalShouldBeConstructableFromUnscaledSByteValueAndScale(sbyte value, int scale, string expected)
    {
        // Given
        BigDecimal candidate = new(value, scale);

        // When
        string actual = candidate.ToString();

        // Then
        Assert.Equal(expected, actual);
    }

    [Theory(DisplayName = "BigDecimal should be constructable from unscaled byte value and scale")]
    [InlineData(byte.MaxValue, 0, "255")]
    [InlineData(byte.MaxValue, 1, "25.5")]
    [InlineData(byte.MaxValue, 2, "2.55")]
    [InlineData(byte.MaxValue, 3, "0.255")]
    [InlineData(byte.MaxValue, 4, "0.0255")]
    [InlineData(byte.MaxValue, 5, "0.00255")]
    [InlineData(byte.MaxValue, 6, "0.000255")]
    [InlineData(byte.MaxValue, 7, "0.0000255")]
    [InlineData(byte.MaxValue, 8, "0.00000255")]
    [InlineData(byte.MaxValue, 9, "0.000000255")]
    [InlineData(byte.MaxValue, 10, "0.0000000255")]
    [InlineData(byte.MaxValue, 20, "0.00000000000000000255")]
    [InlineData(byte.MinValue, 0, "0")]
    [InlineData(byte.MinValue, 1, "0.0")]
    [InlineData(byte.MinValue, 2, "0.00")]
    [InlineData(byte.MinValue, 3, "0.000")]
    [InlineData(byte.MinValue, 4, "0.0000")]
    [InlineData(byte.MinValue, 5, "0.00000")]
    [InlineData(byte.MinValue, 6, "0.000000")]
    [InlineData(byte.MinValue, 7, "0.0000000")]
    [InlineData(byte.MinValue, 8, "0.00000000")]
    [InlineData(byte.MinValue, 9, "0.000000000")]
    [InlineData(byte.MinValue, 10, "0.0000000000")]
    [InlineData(byte.MinValue, 20, "0.00000000000000000000")]
    public void BigDecimalShouldBeConstructableFromUnscaledByteValueAndScale(byte value, int scale, string expected)
    {
        // Given
        BigDecimal candidate = new(value, scale);

        // When
        string actual = candidate.ToString();

        // Then
        Assert.Equal(expected, actual);
    }

    [Theory(DisplayName = "BigDecimal should be constructable from unscaled short value and scale")]
    [InlineData(short.MaxValue, 0, "32767")]
    [InlineData(short.MaxValue, 1, "3276.7")]
    [InlineData(short.MaxValue, 2, "327.67")]
    [InlineData(short.MaxValue, 3, "32.767")]
    [InlineData(short.MaxValue, 4, "3.2767")]
    [InlineData(short.MaxValue, 5, "0.32767")]
    [InlineData(short.MaxValue, 6, "0.032767")]
    [InlineData(short.MaxValue, 7, "0.0032767")]
    [InlineData(short.MaxValue, 8, "0.00032767")]
    [InlineData(short.MaxValue, 9, "0.000032767")]
    [InlineData(short.MaxValue, 10, "0.0000032767")]
    [InlineData(short.MaxValue, 20, "0.00000000000000032767")]
    [InlineData(short.MinValue, 0, "-32768")]
    [InlineData(short.MinValue, 1, "-3276.8")]
    [InlineData(short.MinValue, 2, "-327.68")]
    [InlineData(short.MinValue, 3, "-32.768")]
    [InlineData(short.MinValue, 4, "-3.2768")]
    [InlineData(short.MinValue, 5, "-0.32768")]
    [InlineData(short.MinValue, 6, "-0.032768")]
    [InlineData(short.MinValue, 7, "-0.0032768")]
    [InlineData(short.MinValue, 8, "-0.00032768")]
    [InlineData(short.MinValue, 9, "-0.000032768")]
    [InlineData(short.MinValue, 10, "-0.0000032768")]
    [InlineData(short.MinValue, 20, "-0.00000000000000032768")]
    public void BigDecimalShouldBeConstructableFromUnscaledInt16ValueAndScale(short value, int scale, string expected)
    {
        // Given
        BigDecimal candidate = new(value, scale);

        // When
        string actual = candidate.ToString();

        // Then
        Assert.Equal(expected, actual);
    }

    [Theory(DisplayName = "BigDecimal should be constructable from unscaled ushort value and scale")]
    [InlineData(ushort.MaxValue, 0, "65535")]
    [InlineData(ushort.MaxValue, 1, "6553.5")]
    [InlineData(ushort.MaxValue, 2, "655.35")]
    [InlineData(ushort.MaxValue, 3, "65.535")]
    [InlineData(ushort.MaxValue, 4, "6.5535")]
    [InlineData(ushort.MaxValue, 5, "0.65535")]
    [InlineData(ushort.MaxValue, 6, "0.065535")]
    [InlineData(ushort.MaxValue, 7, "0.0065535")]
    [InlineData(ushort.MaxValue, 8, "0.00065535")]
    [InlineData(ushort.MaxValue, 9, "0.000065535")]
    [InlineData(ushort.MaxValue, 10, "0.0000065535")]
    [InlineData(ushort.MaxValue, 20, "0.00000000000000065535")]
    [InlineData(ushort.MinValue, 0, "0")]
    [InlineData(ushort.MinValue, 1, "0.0")]
    [InlineData(ushort.MinValue, 2, "0.00")]
    [InlineData(ushort.MinValue, 3, "0.000")]
    [InlineData(ushort.MinValue, 4, "0.0000")]
    [InlineData(ushort.MinValue, 5, "0.00000")]
    [InlineData(ushort.MinValue, 6, "0.000000")]
    [InlineData(ushort.MinValue, 7, "0.0000000")]
    [InlineData(ushort.MinValue, 8, "0.00000000")]
    [InlineData(ushort.MinValue, 9, "0.000000000")]
    [InlineData(ushort.MinValue, 10, "0.0000000000")]
    [InlineData(ushort.MinValue, 20, "0.00000000000000000000")]
    public void BigDecimalShouldBeConstructableFromUnscaledUInt16ValueAndScale(ushort value, int scale, string expected)
    {
        // Given
        BigDecimal candidate = new(value, scale);

        // When
        string actual = candidate.ToString();

        // Then
        Assert.Equal(expected, actual);
    }

    [Theory(DisplayName = "BigDecimal should be constructable from unscaled int value and scale")]
    [InlineData(1, 0, "1")]
    [InlineData(1, 1, "0.1")]
    [InlineData(1, 2, "0.01")]
    [InlineData(1, 3, "0.001")]
    [InlineData(1, 4, "0.0001")]
    [InlineData(1, 5, "0.00001")]
    [InlineData(1, 6, "0.000001")]
    [InlineData(1, 7, "0.0000001")]
    [InlineData(1, 8, "0.00000001")]
    [InlineData(1, 9, "0.000000001")]
    [InlineData(1, 10, "0.0000000001")]
    [InlineData(1, 20, "0.00000000000000000001")]
    [InlineData(-1, 0, "-1")]
    [InlineData(-1, 1, "-0.1")]
    [InlineData(-1, 2, "-0.01")]
    [InlineData(-1, 3, "-0.001")]
    [InlineData(-1, 4, "-0.0001")]
    [InlineData(-1, 5, "-0.00001")]
    [InlineData(-1, 6, "-0.000001")]
    [InlineData(-1, 7, "-0.0000001")]
    [InlineData(-1, 8, "-0.00000001")]
    [InlineData(-1, 9, "-0.000000001")]
    [InlineData(-1, 10, "-0.0000000001")]
    [InlineData(-1, 20, "-0.00000000000000000001")]
    [InlineData(int.MaxValue, 0, "2147483647")]
    [InlineData(int.MaxValue, 1, "214748364.7")]
    [InlineData(int.MaxValue, 2, "21474836.47")]
    [InlineData(int.MaxValue, 3, "2147483.647")]
    [InlineData(int.MaxValue, 4, "214748.3647")]
    [InlineData(int.MaxValue, 5, "21474.83647")]
    [InlineData(int.MaxValue, 6, "2147.483647")]
    [InlineData(int.MaxValue, 7, "214.7483647")]
    [InlineData(int.MaxValue, 8, "21.47483647")]
    [InlineData(int.MaxValue, 9, "2.147483647")]
    [InlineData(int.MaxValue, 10, "0.2147483647")]
    [InlineData(int.MaxValue, 20, "0.00000000002147483647")]
    [InlineData(int.MinValue, 0, "-2147483648")]
    [InlineData(int.MinValue, 1, "-214748364.8")]
    [InlineData(int.MinValue, 2, "-21474836.48")]
    [InlineData(int.MinValue, 3, "-2147483.648")]
    [InlineData(int.MinValue, 4, "-214748.3648")]
    [InlineData(int.MinValue, 5, "-21474.83648")]
    [InlineData(int.MinValue, 6, "-2147.483648")]
    [InlineData(int.MinValue, 7, "-214.7483648")]
    [InlineData(int.MinValue, 8, "-21.47483648")]
    [InlineData(int.MinValue, 9, "-2.147483648")]
    [InlineData(int.MinValue, 10, "-0.2147483648")]
    [InlineData(int.MinValue, 20, "-0.00000000002147483648")]
    public void BigDecimalShouldBeConstructableFromUnscaledInt32ValueAndScale(int value, int scale, string expected)
    {
        // Given
        BigDecimal candidate = new(value, scale);

        // When
        string actual = candidate.ToString();

        // Then
        Assert.Equal(expected, actual);
    }

    [Theory(DisplayName = "BigDecimal should be constructable from unscaled uint value and scale")]
    [InlineData(uint.MaxValue, 0, "4294967295")]
    [InlineData(uint.MaxValue, 1, "429496729.5")]
    [InlineData(uint.MaxValue, 2, "42949672.95")]
    [InlineData(uint.MaxValue, 3, "4294967.295")]
    [InlineData(uint.MaxValue, 4, "429496.7295")]
    [InlineData(uint.MaxValue, 5, "42949.67295")]
    [InlineData(uint.MaxValue, 6, "4294.967295")]
    [InlineData(uint.MaxValue, 7, "429.4967295")]
    [InlineData(uint.MaxValue, 8, "42.94967295")]
    [InlineData(uint.MaxValue, 9, "4.294967295")]
    [InlineData(uint.MaxValue, 10, "0.4294967295")]
    [InlineData(uint.MaxValue, 20, "0.00000000004294967295")]
    [InlineData(uint.MinValue, 0, "0")]
    [InlineData(uint.MinValue, 1, "0.0")]
    [InlineData(uint.MinValue, 2, "0.00")]
    [InlineData(uint.MinValue, 3, "0.000")]
    [InlineData(uint.MinValue, 4, "0.0000")]
    [InlineData(uint.MinValue, 5, "0.00000")]
    [InlineData(uint.MinValue, 6, "0.000000")]
    [InlineData(uint.MinValue, 7, "0.0000000")]
    [InlineData(uint.MinValue, 8, "0.00000000")]
    [InlineData(uint.MinValue, 9, "0.000000000")]
    [InlineData(uint.MinValue, 10, "0.0000000000")]
    [InlineData(uint.MinValue, 20, "0.00000000000000000000")]
    public void BigDecimalShouldBeConstructableFromUnscaledUInt32ValueAndScale(uint value, int scale, string expected)
    {
        // Given
        BigDecimal candidate = new(value, scale);

        // When
        string actual = candidate.ToString();

        // Then
        Assert.Equal(expected, actual);
    }

    [Theory(DisplayName = "BigDecimal should be constructable from unscaled long value and scale")]
    [InlineData(long.MaxValue, 0, "9223372036854775807")]
    [InlineData(long.MaxValue, 1, "922337203685477580.7")]
    [InlineData(long.MaxValue, 2, "92233720368547758.07")]
    [InlineData(long.MaxValue, 3, "9223372036854775.807")]
    [InlineData(long.MaxValue, 4, "922337203685477.5807")]
    [InlineData(long.MaxValue, 5, "92233720368547.75807")]
    [InlineData(long.MaxValue, 6, "9223372036854.775807")]
    [InlineData(long.MaxValue, 7, "922337203685.4775807")]
    [InlineData(long.MaxValue, 8, "92233720368.54775807")]
    [InlineData(long.MaxValue, 9, "9223372036.854775807")]
    [InlineData(long.MaxValue, 10, "922337203.6854775807")]
    [InlineData(long.MaxValue, 20, "0.09223372036854775807")]
    [InlineData(long.MinValue, 0, "-9223372036854775808")]
    [InlineData(long.MinValue, 1, "-922337203685477580.8")]
    [InlineData(long.MinValue, 2, "-92233720368547758.08")]
    [InlineData(long.MinValue, 3, "-9223372036854775.808")]
    [InlineData(long.MinValue, 4, "-922337203685477.5808")]
    [InlineData(long.MinValue, 5, "-92233720368547.75808")]
    [InlineData(long.MinValue, 6, "-9223372036854.775808")]
    [InlineData(long.MinValue, 7, "-922337203685.4775808")]
    [InlineData(long.MinValue, 8, "-92233720368.54775808")]
    [InlineData(long.MinValue, 9, "-9223372036.854775808")]
    [InlineData(long.MinValue, 10, "-922337203.6854775808")]
    [InlineData(long.MinValue, 20, "-0.09223372036854775808")]
    public void BigDecimalShouldBeConstructableFromUnscaledInt64ValueAndScale(long value, int scale, string expected)
    {
        // Given
        BigDecimal candidate = new(value, scale);

        // When
        string actual = candidate.ToString();

        // Then
        Assert.Equal(expected, actual);
    }

    [Theory(DisplayName = "BigDecimal should be constructable from unscaled ulong value and scale")]
    [InlineData(ulong.MaxValue, 0, "18446744073709551615")]
    [InlineData(ulong.MaxValue, 1, "1844674407370955161.5")]
    [InlineData(ulong.MaxValue, 2, "184467440737095516.15")]
    [InlineData(ulong.MaxValue, 3, "18446744073709551.615")]
    [InlineData(ulong.MaxValue, 4, "1844674407370955.1615")]
    [InlineData(ulong.MaxValue, 5, "184467440737095.51615")]
    [InlineData(ulong.MaxValue, 6, "18446744073709.551615")]
    [InlineData(ulong.MaxValue, 7, "1844674407370.9551615")]
    [InlineData(ulong.MaxValue, 8, "184467440737.09551615")]
    [InlineData(ulong.MaxValue, 9, "18446744073.709551615")]
    [InlineData(ulong.MaxValue, 10, "1844674407.3709551615")]
    [InlineData(ulong.MaxValue, 20, "0.18446744073709551615")]
    [InlineData(ulong.MinValue, 0, "0")]
    [InlineData(ulong.MinValue, 1, "0.0")]
    [InlineData(ulong.MinValue, 2, "0.00")]
    [InlineData(ulong.MinValue, 3, "0.000")]
    [InlineData(ulong.MinValue, 4, "0.0000")]
    [InlineData(ulong.MinValue, 5, "0.00000")]
    [InlineData(ulong.MinValue, 6, "0.000000")]
    [InlineData(ulong.MinValue, 7, "0.0000000")]
    [InlineData(ulong.MinValue, 8, "0.00000000")]
    [InlineData(ulong.MinValue, 9, "0.000000000")]
    [InlineData(ulong.MinValue, 10, "0.0000000000")]
    [InlineData(ulong.MinValue, 20, "0.00000000000000000000")]
    public void BigDecimalShouldBeConstructableFromUnscaledUInt64ValueAndScale(ulong value, int scale, string expected)
    {
        // Given
        BigDecimal candidate = new(value, scale);

        // When
        string actual = candidate.ToString();

        // Then
        Assert.Equal(expected, actual);
    }

    [Theory(DisplayName = "BigDecimal should be constructable from double value using Binary conversion")]
    [BigDecimalIeeeBinary64DataGenerator]
    public void BigDecimalShouldBeConstructableFromDoubleValueUsingBinaryConversion(double value, string expected)
    {
        // Given
        BigDecimal candidate = new(value, ConversionMode.Binary);

        // When
        string actual = candidate.ToString();

        // Then
        Assert.Equal(expected, actual);
    }

    [Theory(DisplayName = "BigDecimal should be constructable from double value using Decimal conversion")]
    [InlineData(double.MinValue,
        "-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
    [InlineData(double.MaxValue,
        "179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
    [InlineData(double.E, "2.718281828459045")]
    [InlineData(double.Pi, "3.141592653589793")]
    [InlineData(0.0, "0")]
    [InlineData(1.0, "1")]
    [InlineData(1e+1, "10")]
    [InlineData(1e+2, "100")]
    [InlineData(1e+3, "1000")]
    [InlineData(1e+4, "10000")]
    [InlineData(1e+5, "100000")]
    [InlineData(1e+6, "1000000")]
    [InlineData(1e+7, "10000000")]
    [InlineData(1e+8, "100000000")]
    [InlineData(1e+9, "1000000000")]
    [InlineData(1e+10, "10000000000")]
    [InlineData(1e+11, "100000000000")]
    [InlineData(1e+12, "1000000000000")]
    [InlineData(1e+13, "10000000000000")]
    [InlineData(1e+14, "100000000000000")]
    [InlineData(1e+15, "1000000000000000")]
    [InlineData(1e+16, "10000000000000000")]
    [InlineData(1e+17, "100000000000000000")]
    [InlineData(1e+18, "1000000000000000000")]
    [InlineData(1e+19, "10000000000000000000")]
    [InlineData(1e+20, "100000000000000000000")]
    [InlineData(1e+100, "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
    [InlineData(1e+308,
        "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
    [InlineData(1e-1, "0.1")]
    [InlineData(1e-2, "0.01")]
    [InlineData(1e-3, "0.001")]
    [InlineData(1e-4, "0.0001")]
    [InlineData(1e-5, "0.00001")]
    [InlineData(1e-6, "0.000001")]
    [InlineData(1e-7, "0.0000001")]
    [InlineData(1e-8, "0.00000001")]
    [InlineData(1e-9, "0.000000001")]
    [InlineData(1e-10, "0.0000000001")]
    [InlineData(1e-11, "0.00000000001")]
    [InlineData(1e-12, "0.000000000001")]
    [InlineData(1e-13, "0.0000000000001")]
    [InlineData(1e-14, "0.00000000000001")]
    [InlineData(1e-15, "0.000000000000001")]
    [InlineData(1e-16, "0.0000000000000001")]
    [InlineData(1e-17, "0.00000000000000001")]
    [InlineData(1e-18, "0.000000000000000001")]
    [InlineData(1e-19, "0.0000000000000000001")]
    [InlineData(1e-20, "0.00000000000000000001")]
    [InlineData(1e-100, "0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001")]
    [InlineData(1e-317,
        "0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001")]
    [InlineData(2.0, "2")]
    [InlineData(2e+1, "20")]
    [InlineData(2e+2, "200")]
    [InlineData(2e+3, "2000")]
    [InlineData(2e+4, "20000")]
    [InlineData(2e+5, "200000")]
    [InlineData(2e+6, "2000000")]
    [InlineData(2e+7, "20000000")]
    [InlineData(2e+8, "200000000")]
    [InlineData(2e+9, "2000000000")]
    [InlineData(2e+10, "20000000000")]
    [InlineData(2e+11, "200000000000")]
    [InlineData(2e+12, "2000000000000")]
    [InlineData(2e+13, "20000000000000")]
    [InlineData(2e+14, "200000000000000")]
    [InlineData(2e+15, "2000000000000000")]
    [InlineData(2e+16, "20000000000000000")]
    [InlineData(2e+17, "200000000000000000")]
    [InlineData(2e+18, "2000000000000000000")]
    [InlineData(2e+19, "20000000000000000000")]
    [InlineData(2e+20, "200000000000000000000")]
    [InlineData(2e+100, "20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
    [InlineData(2e+307,
        "20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
    [InlineData(2e-1, "0.2")]
    [InlineData(2e-2, "0.02")]
    [InlineData(2e-3, "0.002")]
    [InlineData(2e-4, "0.0002")]
    [InlineData(2e-5, "0.00002")]
    [InlineData(2e-6, "0.000002")]
    [InlineData(2e-7, "0.0000002")]
    [InlineData(2e-8, "0.00000002")]
    [InlineData(2e-9, "0.000000002")]
    [InlineData(2e-10, "0.0000000002")]
    [InlineData(2e-11, "0.00000000002")]
    [InlineData(2e-12, "0.000000000002")]
    [InlineData(2e-13, "0.0000000000002")]
    [InlineData(2e-14, "0.00000000000002")]
    [InlineData(2e-15, "0.000000000000002")]
    [InlineData(2e-16, "0.0000000000000002")]
    [InlineData(2e-17, "0.00000000000000002")]
    [InlineData(2e-18, "0.000000000000000002")]
    [InlineData(2e-19, "0.0000000000000000002")]
    [InlineData(2e-20, "0.00000000000000000002")]
    [InlineData(2e-100, "0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002")]
    [InlineData(2e-320,
        "0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002")]
    [InlineData(3.0, "3")]
    [InlineData(3e+1, "30")]
    [InlineData(3e+2, "300")]
    [InlineData(3e+3, "3000")]
    [InlineData(3e+4, "30000")]
    [InlineData(3e+5, "300000")]
    [InlineData(3e+6, "3000000")]
    [InlineData(3e+7, "30000000")]
    [InlineData(3e+8, "300000000")]
    [InlineData(3e+9, "3000000000")]
    [InlineData(3e+10, "30000000000")]
    [InlineData(3e+11, "300000000000")]
    [InlineData(3e+12, "3000000000000")]
    [InlineData(3e+13, "30000000000000")]
    [InlineData(3e+14, "300000000000000")]
    [InlineData(3e+15, "3000000000000000")]
    [InlineData(3e+16, "30000000000000000")]
    [InlineData(3e+17, "300000000000000000")]
    [InlineData(3e+18, "3000000000000000000")]
    [InlineData(3e+19, "30000000000000000000")]
    [InlineData(3e+20, "300000000000000000000")]
    [InlineData(3e+100, "30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
    [InlineData(3e+307,
        "30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
    [InlineData(3e-1, "0.3")]
    [InlineData(3e-2, "0.03")]
    [InlineData(3e-3, "0.003")]
    [InlineData(3e-4, "0.0003")]
    [InlineData(3e-5, "0.00003")]
    [InlineData(3e-6, "0.000003")]
    [InlineData(3e-7, "0.0000003")]
    [InlineData(3e-8, "0.00000003")]
    [InlineData(3e-9, "0.000000003")]
    [InlineData(3e-10, "0.0000000003")]
    [InlineData(3e-11, "0.00000000003")]
    [InlineData(3e-12, "0.000000000003")]
    [InlineData(3e-13, "0.0000000000003")]
    [InlineData(3e-14, "0.00000000000003")]
    [InlineData(3e-15, "0.000000000000003")]
    [InlineData(3e-16, "0.0000000000000003")]
    [InlineData(3e-17, "0.00000000000000003")]
    [InlineData(3e-18, "0.000000000000000003")]
    [InlineData(3e-19, "0.0000000000000000003")]
    [InlineData(3e-20, "0.00000000000000000003")]
    [InlineData(3e-100, "0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003")]
    [InlineData(3e-320,
        "0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003")]
    [InlineData(4.0, "4")]
    [InlineData(4e+1, "40")]
    [InlineData(4e+2, "400")]
    [InlineData(4e+3, "4000")]
    [InlineData(4e+4, "40000")]
    [InlineData(4e+5, "400000")]
    [InlineData(4e+6, "4000000")]
    [InlineData(4e+7, "40000000")]
    [InlineData(4e+8, "400000000")]
    [InlineData(4e+9, "4000000000")]
    [InlineData(4e+10, "40000000000")]
    [InlineData(4e+11, "400000000000")]
    [InlineData(4e+12, "4000000000000")]
    [InlineData(4e+13, "40000000000000")]
    [InlineData(4e+14, "400000000000000")]
    [InlineData(4e+15, "4000000000000000")]
    [InlineData(4e+16, "40000000000000000")]
    [InlineData(4e+17, "400000000000000000")]
    [InlineData(4e+18, "4000000000000000000")]
    [InlineData(4e+19, "40000000000000000000")]
    [InlineData(4e+20, "400000000000000000000")]
    [InlineData(4e+100, "40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
    [InlineData(4e+307,
        "40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
    [InlineData(4e-1, "0.4")]
    [InlineData(4e-2, "0.04")]
    [InlineData(4e-3, "0.004")]
    [InlineData(4e-4, "0.0004")]
    [InlineData(4e-5, "0.00004")]
    [InlineData(4e-6, "0.000004")]
    [InlineData(4e-7, "0.0000004")]
    [InlineData(4e-8, "0.00000004")]
    [InlineData(4e-9, "0.000000004")]
    [InlineData(4e-10, "0.0000000004")]
    [InlineData(4e-11, "0.00000000004")]
    [InlineData(4e-12, "0.000000000004")]
    [InlineData(4e-13, "0.0000000000004")]
    [InlineData(4e-14, "0.00000000000004")]
    [InlineData(4e-15, "0.000000000000004")]
    [InlineData(4e-16, "0.0000000000000004")]
    [InlineData(4e-17, "0.00000000000000004")]
    [InlineData(4e-18, "0.000000000000000004")]
    [InlineData(4e-19, "0.0000000000000000004")]
    [InlineData(4e-20, "0.00000000000000000004")]
    [InlineData(4e-100, "0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004")]
    [InlineData(4e-320,
        "0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004")]
    [InlineData(5.0, "5")]
    [InlineData(5e+1, "50")]
    [InlineData(5e+2, "500")]
    [InlineData(5e+3, "5000")]
    [InlineData(5e+4, "50000")]
    [InlineData(5e+5, "500000")]
    [InlineData(5e+6, "5000000")]
    [InlineData(5e+7, "50000000")]
    [InlineData(5e+8, "500000000")]
    [InlineData(5e+9, "5000000000")]
    [InlineData(5e+10, "50000000000")]
    [InlineData(5e+11, "500000000000")]
    [InlineData(5e+12, "5000000000000")]
    [InlineData(5e+13, "50000000000000")]
    [InlineData(5e+14, "500000000000000")]
    [InlineData(5e+15, "5000000000000000")]
    [InlineData(5e+16, "50000000000000000")]
    [InlineData(5e+17, "500000000000000000")]
    [InlineData(5e+18, "5000000000000000000")]
    [InlineData(5e+19, "50000000000000000000")]
    [InlineData(5e+20, "500000000000000000000")]
    [InlineData(5e+100, "50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
    [InlineData(5e+307,
        "50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
    [InlineData(5e-1, "0.5")]
    [InlineData(5e-2, "0.05")]
    [InlineData(5e-3, "0.005")]
    [InlineData(5e-4, "0.0005")]
    [InlineData(5e-5, "0.00005")]
    [InlineData(5e-6, "0.000005")]
    [InlineData(5e-7, "0.0000005")]
    [InlineData(5e-8, "0.00000005")]
    [InlineData(5e-9, "0.000000005")]
    [InlineData(5e-10, "0.0000000005")]
    [InlineData(5e-11, "0.00000000005")]
    [InlineData(5e-12, "0.000000000005")]
    [InlineData(5e-13, "0.0000000000005")]
    [InlineData(5e-14, "0.00000000000005")]
    [InlineData(5e-15, "0.000000000000005")]
    [InlineData(5e-16, "0.0000000000000005")]
    [InlineData(5e-17, "0.00000000000000005")]
    [InlineData(5e-18, "0.000000000000000005")]
    [InlineData(5e-19, "0.0000000000000000005")]
    [InlineData(5e-20, "0.00000000000000000005")]
    [InlineData(5e-100, "0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005")]
    [InlineData(5e-320,
        "0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005")]
    [InlineData(6.0, "6")]
    [InlineData(6e+1, "60")]
    [InlineData(6e+2, "600")]
    [InlineData(6e+3, "6000")]
    [InlineData(6e+4, "60000")]
    [InlineData(6e+5, "600000")]
    [InlineData(6e+6, "6000000")]
    [InlineData(6e+7, "60000000")]
    [InlineData(6e+8, "600000000")]
    [InlineData(6e+9, "6000000000")]
    [InlineData(6e+10, "60000000000")]
    [InlineData(6e+11, "600000000000")]
    [InlineData(6e+12, "6000000000000")]
    [InlineData(6e+13, "60000000000000")]
    [InlineData(6e+14, "600000000000000")]
    [InlineData(6e+15, "6000000000000000")]
    [InlineData(6e+16, "60000000000000000")]
    [InlineData(6e+17, "600000000000000000")]
    [InlineData(6e+18, "6000000000000000000")]
    [InlineData(6e+19, "60000000000000000000")]
    [InlineData(6e+20, "600000000000000000000")]
    [InlineData(6e+100, "60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
    [InlineData(6e+307,
        "60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
    [InlineData(6e-1, "0.6")]
    [InlineData(6e-2, "0.06")]
    [InlineData(6e-3, "0.006")]
    [InlineData(6e-4, "0.0006")]
    [InlineData(6e-5, "0.00006")]
    [InlineData(6e-6, "0.000006")]
    [InlineData(6e-7, "0.0000006")]
    [InlineData(6e-8, "0.00000006")]
    [InlineData(6e-9, "0.000000006")]
    [InlineData(6e-10, "0.0000000006")]
    [InlineData(6e-11, "0.00000000006")]
    [InlineData(6e-12, "0.000000000006")]
    [InlineData(6e-13, "0.0000000000006")]
    [InlineData(6e-14, "0.00000000000006")]
    [InlineData(6e-15, "0.000000000000006")]
    [InlineData(6e-16, "0.0000000000000006")]
    [InlineData(6e-17, "0.00000000000000006")]
    [InlineData(6e-18, "0.000000000000000006")]
    [InlineData(6e-19, "0.0000000000000000006")]
    [InlineData(6e-20, "0.00000000000000000006")]
    [InlineData(6e-100, "0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006")]
    [InlineData(6e-320,
        "0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006")]
    [InlineData(7.0, "7")]
    [InlineData(7e+1, "70")]
    [InlineData(7e+2, "700")]
    [InlineData(7e+3, "7000")]
    [InlineData(7e+4, "70000")]
    [InlineData(7e+5, "700000")]
    [InlineData(7e+6, "7000000")]
    [InlineData(7e+7, "70000000")]
    [InlineData(7e+8, "700000000")]
    [InlineData(7e+9, "7000000000")]
    [InlineData(7e+10, "70000000000")]
    [InlineData(7e+11, "700000000000")]
    [InlineData(7e+12, "7000000000000")]
    [InlineData(7e+13, "70000000000000")]
    [InlineData(7e+14, "700000000000000")]
    [InlineData(7e+15, "7000000000000000")]
    [InlineData(7e+16, "70000000000000000")]
    [InlineData(7e+17, "700000000000000000")]
    [InlineData(7e+18, "7000000000000000000")]
    [InlineData(7e+19, "70000000000000000000")]
    [InlineData(7e+20, "700000000000000000000")]
    [InlineData(7e+100, "70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
    [InlineData(7e+307,
        "70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
    [InlineData(7e-1, "0.7")]
    [InlineData(7e-2, "0.07")]
    [InlineData(7e-3, "0.007")]
    [InlineData(7e-4, "0.0007")]
    [InlineData(7e-5, "0.00007")]
    [InlineData(7e-6, "0.000007")]
    [InlineData(7e-7, "0.0000007")]
    [InlineData(7e-8, "0.00000007")]
    [InlineData(7e-9, "0.000000007")]
    [InlineData(7e-10, "0.0000000007")]
    [InlineData(7e-11, "0.00000000007")]
    [InlineData(7e-12, "0.000000000007")]
    [InlineData(7e-13, "0.0000000000007")]
    [InlineData(7e-14, "0.00000000000007")]
    [InlineData(7e-15, "0.000000000000007")]
    [InlineData(7e-16, "0.0000000000000007")]
    [InlineData(7e-17, "0.00000000000000007")]
    [InlineData(7e-18, "0.000000000000000007")]
    [InlineData(7e-19, "0.0000000000000000007")]
    [InlineData(7e-20, "0.00000000000000000007")]
    [InlineData(7e-100, "0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007")]
    [InlineData(7e-320,
        "0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007")]
    [InlineData(8.0, "8")]
    [InlineData(8e+1, "80")]
    [InlineData(8e+2, "800")]
    [InlineData(8e+3, "8000")]
    [InlineData(8e+4, "80000")]
    [InlineData(8e+5, "800000")]
    [InlineData(8e+6, "8000000")]
    [InlineData(8e+7, "80000000")]
    [InlineData(8e+8, "800000000")]
    [InlineData(8e+9, "8000000000")]
    [InlineData(8e+10, "80000000000")]
    [InlineData(8e+11, "800000000000")]
    [InlineData(8e+12, "8000000000000")]
    [InlineData(8e+13, "80000000000000")]
    [InlineData(8e+14, "800000000000000")]
    [InlineData(8e+15, "8000000000000000")]
    [InlineData(8e+16, "80000000000000000")]
    [InlineData(8e+17, "800000000000000000")]
    [InlineData(8e+18, "8000000000000000000")]
    [InlineData(8e+19, "80000000000000000000")]
    [InlineData(8e+20, "800000000000000000000")]
    [InlineData(8e+100, "80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
    [InlineData(8e+307,
        "80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
    [InlineData(8e-1, "0.8")]
    [InlineData(8e-2, "0.08")]
    [InlineData(8e-3, "0.008")]
    [InlineData(8e-4, "0.0008")]
    [InlineData(8e-5, "0.00008")]
    [InlineData(8e-6, "0.000008")]
    [InlineData(8e-7, "0.0000008")]
    [InlineData(8e-8, "0.00000008")]
    [InlineData(8e-9, "0.000000008")]
    [InlineData(8e-10, "0.0000000008")]
    [InlineData(8e-11, "0.00000000008")]
    [InlineData(8e-12, "0.000000000008")]
    [InlineData(8e-13, "0.0000000000008")]
    [InlineData(8e-14, "0.00000000000008")]
    [InlineData(8e-15, "0.000000000000008")]
    [InlineData(8e-16, "0.0000000000000008")]
    [InlineData(8e-17, "0.00000000000000008")]
    [InlineData(8e-18, "0.000000000000000008")]
    [InlineData(8e-19, "0.0000000000000000008")]
    [InlineData(8e-20, "0.00000000000000000008")]
    [InlineData(8e-100, "0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008")]
    [InlineData(8e-320,
        "0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008")]
    [InlineData(9.0, "9")]
    [InlineData(9e+1, "90")]
    [InlineData(9e+2, "900")]
    [InlineData(9e+3, "9000")]
    [InlineData(9e+4, "90000")]
    [InlineData(9e+5, "900000")]
    [InlineData(9e+6, "9000000")]
    [InlineData(9e+7, "90000000")]
    [InlineData(9e+8, "900000000")]
    [InlineData(9e+9, "9000000000")]
    [InlineData(9e+10, "90000000000")]
    [InlineData(9e+11, "900000000000")]
    [InlineData(9e+12, "9000000000000")]
    [InlineData(9e+13, "90000000000000")]
    [InlineData(9e+14, "900000000000000")]
    [InlineData(9e+15, "9000000000000000")]
    [InlineData(9e+16, "90000000000000000")]
    [InlineData(9e+17, "900000000000000000")]
    [InlineData(9e+18, "9000000000000000000")]
    [InlineData(9e+19, "90000000000000000000")]
    [InlineData(9e+20, "900000000000000000000")]
    [InlineData(9e+100, "90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
    [InlineData(9e+307,
        "90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
    [InlineData(9e-1, "0.9")]
    [InlineData(9e-2, "0.09")]
    [InlineData(9e-3, "0.009")]
    [InlineData(9e-4, "0.0009")]
    [InlineData(9e-5, "0.00009")]
    [InlineData(9e-6, "0.000009")]
    [InlineData(9e-7, "0.0000009")]
    [InlineData(9e-8, "0.00000009")]
    [InlineData(9e-9, "0.000000009")]
    [InlineData(9e-10, "0.0000000009")]
    [InlineData(9e-11, "0.00000000009")]
    [InlineData(9e-12, "0.000000000009")]
    [InlineData(9e-13, "0.0000000000009")]
    [InlineData(9e-14, "0.00000000000009")]
    [InlineData(9e-15, "0.000000000000009")]
    [InlineData(9e-16, "0.0000000000000009")]
    [InlineData(9e-17, "0.00000000000000009")]
    [InlineData(9e-18, "0.000000000000000009")]
    [InlineData(9e-19, "0.0000000000000000009")]
    [InlineData(9e-20, "0.00000000000000000009")]
    [InlineData(9e-100, "0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009")]
    [InlineData(9e-320,
        "0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009")]
    [InlineData(-1.0, "-1")]
    [InlineData(-1e+1, "-10")]
    [InlineData(-1e+2, "-100")]
    [InlineData(-1e+3, "-1000")]
    [InlineData(-1e+4, "-10000")]
    [InlineData(-1e+5, "-100000")]
    [InlineData(-1e+6, "-1000000")]
    [InlineData(-1e+7, "-10000000")]
    [InlineData(-1e+8, "-100000000")]
    [InlineData(-1e+9, "-1000000000")]
    [InlineData(-1e+10, "-10000000000")]
    [InlineData(-1e+11, "-100000000000")]
    [InlineData(-1e+12, "-1000000000000")]
    [InlineData(-1e+13, "-10000000000000")]
    [InlineData(-1e+14, "-100000000000000")]
    [InlineData(-1e+15, "-1000000000000000")]
    [InlineData(-1e+16, "-10000000000000000")]
    [InlineData(-1e+17, "-100000000000000000")]
    [InlineData(-1e+18, "-1000000000000000000")]
    [InlineData(-1e+19, "-10000000000000000000")]
    [InlineData(-1e+20, "-100000000000000000000")]
    [InlineData(-1e+100, "-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
    [InlineData(-1e+308,
        "-100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
    [InlineData(-1e-1, "-0.1")]
    [InlineData(-1e-2, "-0.01")]
    [InlineData(-1e-3, "-0.001")]
    [InlineData(-1e-4, "-0.0001")]
    [InlineData(-1e-5, "-0.00001")]
    [InlineData(-1e-6, "-0.000001")]
    [InlineData(-1e-7, "-0.0000001")]
    [InlineData(-1e-8, "-0.00000001")]
    [InlineData(-1e-9, "-0.000000001")]
    [InlineData(-1e-10, "-0.0000000001")]
    [InlineData(-1e-11, "-0.00000000001")]
    [InlineData(-1e-12, "-0.000000000001")]
    [InlineData(-1e-13, "-0.0000000000001")]
    [InlineData(-1e-14, "-0.00000000000001")]
    [InlineData(-1e-15, "-0.000000000000001")]
    [InlineData(-1e-16, "-0.0000000000000001")]
    [InlineData(-1e-17, "-0.00000000000000001")]
    [InlineData(-1e-18, "-0.000000000000000001")]
    [InlineData(-1e-19, "-0.0000000000000000001")]
    [InlineData(-1e-20, "-0.00000000000000000001")]
    [InlineData(-1e-100, "-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001")]
    [InlineData(-1e-317,
        "-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001")]
    [InlineData(-2.0, "-2")]
    [InlineData(-2e+1, "-20")]
    [InlineData(-2e+2, "-200")]
    [InlineData(-2e+3, "-2000")]
    [InlineData(-2e+4, "-20000")]
    [InlineData(-2e+5, "-200000")]
    [InlineData(-2e+6, "-2000000")]
    [InlineData(-2e+7, "-20000000")]
    [InlineData(-2e+8, "-200000000")]
    [InlineData(-2e+9, "-2000000000")]
    [InlineData(-2e+10, "-20000000000")]
    [InlineData(-2e+11, "-200000000000")]
    [InlineData(-2e+12, "-2000000000000")]
    [InlineData(-2e+13, "-20000000000000")]
    [InlineData(-2e+14, "-200000000000000")]
    [InlineData(-2e+15, "-2000000000000000")]
    [InlineData(-2e+16, "-20000000000000000")]
    [InlineData(-2e+17, "-200000000000000000")]
    [InlineData(-2e+18, "-2000000000000000000")]
    [InlineData(-2e+19, "-20000000000000000000")]
    [InlineData(-2e+20, "-200000000000000000000")]
    [InlineData(-2e+100, "-20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
    [InlineData(-2e+307,
        "-20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
    [InlineData(-2e-1, "-0.2")]
    [InlineData(-2e-2, "-0.02")]
    [InlineData(-2e-3, "-0.002")]
    [InlineData(-2e-4, "-0.0002")]
    [InlineData(-2e-5, "-0.00002")]
    [InlineData(-2e-6, "-0.000002")]
    [InlineData(-2e-7, "-0.0000002")]
    [InlineData(-2e-8, "-0.00000002")]
    [InlineData(-2e-9, "-0.000000002")]
    [InlineData(-2e-10, "-0.0000000002")]
    [InlineData(-2e-11, "-0.00000000002")]
    [InlineData(-2e-12, "-0.000000000002")]
    [InlineData(-2e-13, "-0.0000000000002")]
    [InlineData(-2e-14, "-0.00000000000002")]
    [InlineData(-2e-15, "-0.000000000000002")]
    [InlineData(-2e-16, "-0.0000000000000002")]
    [InlineData(-2e-17, "-0.00000000000000002")]
    [InlineData(-2e-18, "-0.000000000000000002")]
    [InlineData(-2e-19, "-0.0000000000000000002")]
    [InlineData(-2e-20, "-0.00000000000000000002")]
    [InlineData(-2e-100, "-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002")]
    [InlineData(-2e-320,
        "-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002")]
    [InlineData(-3.0, "-3")]
    [InlineData(-3e+1, "-30")]
    [InlineData(-3e+2, "-300")]
    [InlineData(-3e+3, "-3000")]
    [InlineData(-3e+4, "-30000")]
    [InlineData(-3e+5, "-300000")]
    [InlineData(-3e+6, "-3000000")]
    [InlineData(-3e+7, "-30000000")]
    [InlineData(-3e+8, "-300000000")]
    [InlineData(-3e+9, "-3000000000")]
    [InlineData(-3e+10, "-30000000000")]
    [InlineData(-3e+11, "-300000000000")]
    [InlineData(-3e+12, "-3000000000000")]
    [InlineData(-3e+13, "-30000000000000")]
    [InlineData(-3e+14, "-300000000000000")]
    [InlineData(-3e+15, "-3000000000000000")]
    [InlineData(-3e+16, "-30000000000000000")]
    [InlineData(-3e+17, "-300000000000000000")]
    [InlineData(-3e+18, "-3000000000000000000")]
    [InlineData(-3e+19, "-30000000000000000000")]
    [InlineData(-3e+20, "-300000000000000000000")]
    [InlineData(-3e+100, "-30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
    [InlineData(-3e+307,
        "-30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
    [InlineData(-3e-1, "-0.3")]
    [InlineData(-3e-2, "-0.03")]
    [InlineData(-3e-3, "-0.003")]
    [InlineData(-3e-4, "-0.0003")]
    [InlineData(-3e-5, "-0.00003")]
    [InlineData(-3e-6, "-0.000003")]
    [InlineData(-3e-7, "-0.0000003")]
    [InlineData(-3e-8, "-0.00000003")]
    [InlineData(-3e-9, "-0.000000003")]
    [InlineData(-3e-10, "-0.0000000003")]
    [InlineData(-3e-11, "-0.00000000003")]
    [InlineData(-3e-12, "-0.000000000003")]
    [InlineData(-3e-13, "-0.0000000000003")]
    [InlineData(-3e-14, "-0.00000000000003")]
    [InlineData(-3e-15, "-0.000000000000003")]
    [InlineData(-3e-16, "-0.0000000000000003")]
    [InlineData(-3e-17, "-0.00000000000000003")]
    [InlineData(-3e-18, "-0.000000000000000003")]
    [InlineData(-3e-19, "-0.0000000000000000003")]
    [InlineData(-3e-20, "-0.00000000000000000003")]
    [InlineData(-3e-100, "-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003")]
    [InlineData(-3e-320,
        "-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003")]
    [InlineData(-4.0, "-4")]
    [InlineData(-4e+1, "-40")]
    [InlineData(-4e+2, "-400")]
    [InlineData(-4e+3, "-4000")]
    [InlineData(-4e+4, "-40000")]
    [InlineData(-4e+5, "-400000")]
    [InlineData(-4e+6, "-4000000")]
    [InlineData(-4e+7, "-40000000")]
    [InlineData(-4e+8, "-400000000")]
    [InlineData(-4e+9, "-4000000000")]
    [InlineData(-4e+10, "-40000000000")]
    [InlineData(-4e+11, "-400000000000")]
    [InlineData(-4e+12, "-4000000000000")]
    [InlineData(-4e+13, "-40000000000000")]
    [InlineData(-4e+14, "-400000000000000")]
    [InlineData(-4e+15, "-4000000000000000")]
    [InlineData(-4e+16, "-40000000000000000")]
    [InlineData(-4e+17, "-400000000000000000")]
    [InlineData(-4e+18, "-4000000000000000000")]
    [InlineData(-4e+19, "-40000000000000000000")]
    [InlineData(-4e+20, "-400000000000000000000")]
    [InlineData(-4e+100, "-40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
    [InlineData(-4e+307,
        "-40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
    [InlineData(-4e-1, "-0.4")]
    [InlineData(-4e-2, "-0.04")]
    [InlineData(-4e-3, "-0.004")]
    [InlineData(-4e-4, "-0.0004")]
    [InlineData(-4e-5, "-0.00004")]
    [InlineData(-4e-6, "-0.000004")]
    [InlineData(-4e-7, "-0.0000004")]
    [InlineData(-4e-8, "-0.00000004")]
    [InlineData(-4e-9, "-0.000000004")]
    [InlineData(-4e-10, "-0.0000000004")]
    [InlineData(-4e-11, "-0.00000000004")]
    [InlineData(-4e-12, "-0.000000000004")]
    [InlineData(-4e-13, "-0.0000000000004")]
    [InlineData(-4e-14, "-0.00000000000004")]
    [InlineData(-4e-15, "-0.000000000000004")]
    [InlineData(-4e-16, "-0.0000000000000004")]
    [InlineData(-4e-17, "-0.00000000000000004")]
    [InlineData(-4e-18, "-0.000000000000000004")]
    [InlineData(-4e-19, "-0.0000000000000000004")]
    [InlineData(-4e-20, "-0.00000000000000000004")]
    [InlineData(-4e-100, "-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004")]
    [InlineData(-4e-320,
        "-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004")]
    [InlineData(-5.0, "-5")]
    [InlineData(-5e+1, "-50")]
    [InlineData(-5e+2, "-500")]
    [InlineData(-5e+3, "-5000")]
    [InlineData(-5e+4, "-50000")]
    [InlineData(-5e+5, "-500000")]
    [InlineData(-5e+6, "-5000000")]
    [InlineData(-5e+7, "-50000000")]
    [InlineData(-5e+8, "-500000000")]
    [InlineData(-5e+9, "-5000000000")]
    [InlineData(-5e+10, "-50000000000")]
    [InlineData(-5e+11, "-500000000000")]
    [InlineData(-5e+12, "-5000000000000")]
    [InlineData(-5e+13, "-50000000000000")]
    [InlineData(-5e+14, "-500000000000000")]
    [InlineData(-5e+15, "-5000000000000000")]
    [InlineData(-5e+16, "-50000000000000000")]
    [InlineData(-5e+17, "-500000000000000000")]
    [InlineData(-5e+18, "-5000000000000000000")]
    [InlineData(-5e+19, "-50000000000000000000")]
    [InlineData(-5e+20, "-500000000000000000000")]
    [InlineData(-5e+100, "-50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
    [InlineData(-5e+307,
        "-50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
    [InlineData(-5e-1, "-0.5")]
    [InlineData(-5e-2, "-0.05")]
    [InlineData(-5e-3, "-0.005")]
    [InlineData(-5e-4, "-0.0005")]
    [InlineData(-5e-5, "-0.00005")]
    [InlineData(-5e-6, "-0.000005")]
    [InlineData(-5e-7, "-0.0000005")]
    [InlineData(-5e-8, "-0.00000005")]
    [InlineData(-5e-9, "-0.000000005")]
    [InlineData(-5e-10, "-0.0000000005")]
    [InlineData(-5e-11, "-0.00000000005")]
    [InlineData(-5e-12, "-0.000000000005")]
    [InlineData(-5e-13, "-0.0000000000005")]
    [InlineData(-5e-14, "-0.00000000000005")]
    [InlineData(-5e-15, "-0.000000000000005")]
    [InlineData(-5e-16, "-0.0000000000000005")]
    [InlineData(-5e-17, "-0.00000000000000005")]
    [InlineData(-5e-18, "-0.000000000000000005")]
    [InlineData(-5e-19, "-0.0000000000000000005")]
    [InlineData(-5e-20, "-0.00000000000000000005")]
    [InlineData(-5e-100, "-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005")]
    [InlineData(-5e-320,
        "-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005")]
    [InlineData(-6.0, "-6")]
    [InlineData(-6e+1, "-60")]
    [InlineData(-6e+2, "-600")]
    [InlineData(-6e+3, "-6000")]
    [InlineData(-6e+4, "-60000")]
    [InlineData(-6e+5, "-600000")]
    [InlineData(-6e+6, "-6000000")]
    [InlineData(-6e+7, "-60000000")]
    [InlineData(-6e+8, "-600000000")]
    [InlineData(-6e+9, "-6000000000")]
    [InlineData(-6e+10, "-60000000000")]
    [InlineData(-6e+11, "-600000000000")]
    [InlineData(-6e+12, "-6000000000000")]
    [InlineData(-6e+13, "-60000000000000")]
    [InlineData(-6e+14, "-600000000000000")]
    [InlineData(-6e+15, "-6000000000000000")]
    [InlineData(-6e+16, "-60000000000000000")]
    [InlineData(-6e+17, "-600000000000000000")]
    [InlineData(-6e+18, "-6000000000000000000")]
    [InlineData(-6e+19, "-60000000000000000000")]
    [InlineData(-6e+20, "-600000000000000000000")]
    [InlineData(-6e+100, "-60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
    [InlineData(-6e+307,
        "-60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
    [InlineData(-6e-1, "-0.6")]
    [InlineData(-6e-2, "-0.06")]
    [InlineData(-6e-3, "-0.006")]
    [InlineData(-6e-4, "-0.0006")]
    [InlineData(-6e-5, "-0.00006")]
    [InlineData(-6e-6, "-0.000006")]
    [InlineData(-6e-7, "-0.0000006")]
    [InlineData(-6e-8, "-0.00000006")]
    [InlineData(-6e-9, "-0.000000006")]
    [InlineData(-6e-10, "-0.0000000006")]
    [InlineData(-6e-11, "-0.00000000006")]
    [InlineData(-6e-12, "-0.000000000006")]
    [InlineData(-6e-13, "-0.0000000000006")]
    [InlineData(-6e-14, "-0.00000000000006")]
    [InlineData(-6e-15, "-0.000000000000006")]
    [InlineData(-6e-16, "-0.0000000000000006")]
    [InlineData(-6e-17, "-0.00000000000000006")]
    [InlineData(-6e-18, "-0.000000000000000006")]
    [InlineData(-6e-19, "-0.0000000000000000006")]
    [InlineData(-6e-20, "-0.00000000000000000006")]
    [InlineData(-6e-100, "-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006")]
    [InlineData(-6e-320,
        "-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006")]
    [InlineData(-7.0, "-7")]
    [InlineData(-7e+1, "-70")]
    [InlineData(-7e+2, "-700")]
    [InlineData(-7e+3, "-7000")]
    [InlineData(-7e+4, "-70000")]
    [InlineData(-7e+5, "-700000")]
    [InlineData(-7e+6, "-7000000")]
    [InlineData(-7e+7, "-70000000")]
    [InlineData(-7e+8, "-700000000")]
    [InlineData(-7e+9, "-7000000000")]
    [InlineData(-7e+10, "-70000000000")]
    [InlineData(-7e+11, "-700000000000")]
    [InlineData(-7e+12, "-7000000000000")]
    [InlineData(-7e+13, "-70000000000000")]
    [InlineData(-7e+14, "-700000000000000")]
    [InlineData(-7e+15, "-7000000000000000")]
    [InlineData(-7e+16, "-70000000000000000")]
    [InlineData(-7e+17, "-700000000000000000")]
    [InlineData(-7e+18, "-7000000000000000000")]
    [InlineData(-7e+19, "-70000000000000000000")]
    [InlineData(-7e+20, "-700000000000000000000")]
    [InlineData(-7e+100, "-70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
    [InlineData(-7e+307,
        "-70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
    [InlineData(-7e-1, "-0.7")]
    [InlineData(-7e-2, "-0.07")]
    [InlineData(-7e-3, "-0.007")]
    [InlineData(-7e-4, "-0.0007")]
    [InlineData(-7e-5, "-0.00007")]
    [InlineData(-7e-6, "-0.000007")]
    [InlineData(-7e-7, "-0.0000007")]
    [InlineData(-7e-8, "-0.00000007")]
    [InlineData(-7e-9, "-0.000000007")]
    [InlineData(-7e-10, "-0.0000000007")]
    [InlineData(-7e-11, "-0.00000000007")]
    [InlineData(-7e-12, "-0.000000000007")]
    [InlineData(-7e-13, "-0.0000000000007")]
    [InlineData(-7e-14, "-0.00000000000007")]
    [InlineData(-7e-15, "-0.000000000000007")]
    [InlineData(-7e-16, "-0.0000000000000007")]
    [InlineData(-7e-17, "-0.00000000000000007")]
    [InlineData(-7e-18, "-0.000000000000000007")]
    [InlineData(-7e-19, "-0.0000000000000000007")]
    [InlineData(-7e-20, "-0.00000000000000000007")]
    [InlineData(-7e-100, "-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007")]
    [InlineData(-7e-320,
        "-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007")]
    [InlineData(-8.0, "-8")]
    [InlineData(-8e+1, "-80")]
    [InlineData(-8e+2, "-800")]
    [InlineData(-8e+3, "-8000")]
    [InlineData(-8e+4, "-80000")]
    [InlineData(-8e+5, "-800000")]
    [InlineData(-8e+6, "-8000000")]
    [InlineData(-8e+7, "-80000000")]
    [InlineData(-8e+8, "-800000000")]
    [InlineData(-8e+9, "-8000000000")]
    [InlineData(-8e+10, "-80000000000")]
    [InlineData(-8e+11, "-800000000000")]
    [InlineData(-8e+12, "-8000000000000")]
    [InlineData(-8e+13, "-80000000000000")]
    [InlineData(-8e+14, "-800000000000000")]
    [InlineData(-8e+15, "-8000000000000000")]
    [InlineData(-8e+16, "-80000000000000000")]
    [InlineData(-8e+17, "-800000000000000000")]
    [InlineData(-8e+18, "-8000000000000000000")]
    [InlineData(-8e+19, "-80000000000000000000")]
    [InlineData(-8e+20, "-800000000000000000000")]
    [InlineData(-8e+100, "-80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
    [InlineData(-8e+307,
        "-80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
    [InlineData(-8e-1, "-0.8")]
    [InlineData(-8e-2, "-0.08")]
    [InlineData(-8e-3, "-0.008")]
    [InlineData(-8e-4, "-0.0008")]
    [InlineData(-8e-5, "-0.00008")]
    [InlineData(-8e-6, "-0.000008")]
    [InlineData(-8e-7, "-0.0000008")]
    [InlineData(-8e-8, "-0.00000008")]
    [InlineData(-8e-9, "-0.000000008")]
    [InlineData(-8e-10, "-0.0000000008")]
    [InlineData(-8e-11, "-0.00000000008")]
    [InlineData(-8e-12, "-0.000000000008")]
    [InlineData(-8e-13, "-0.0000000000008")]
    [InlineData(-8e-14, "-0.00000000000008")]
    [InlineData(-8e-15, "-0.000000000000008")]
    [InlineData(-8e-16, "-0.0000000000000008")]
    [InlineData(-8e-17, "-0.00000000000000008")]
    [InlineData(-8e-18, "-0.000000000000000008")]
    [InlineData(-8e-19, "-0.0000000000000000008")]
    [InlineData(-8e-20, "-0.00000000000000000008")]
    [InlineData(-8e-100, "-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008")]
    [InlineData(-8e-320,
        "-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008")]
    [InlineData(-9.0, "-9")]
    [InlineData(-9e+1, "-90")]
    [InlineData(-9e+2, "-900")]
    [InlineData(-9e+3, "-9000")]
    [InlineData(-9e+4, "-90000")]
    [InlineData(-9e+5, "-900000")]
    [InlineData(-9e+6, "-9000000")]
    [InlineData(-9e+7, "-90000000")]
    [InlineData(-9e+8, "-900000000")]
    [InlineData(-9e+9, "-9000000000")]
    [InlineData(-9e+10, "-90000000000")]
    [InlineData(-9e+11, "-900000000000")]
    [InlineData(-9e+12, "-9000000000000")]
    [InlineData(-9e+13, "-90000000000000")]
    [InlineData(-9e+14, "-900000000000000")]
    [InlineData(-9e+15, "-9000000000000000")]
    [InlineData(-9e+16, "-90000000000000000")]
    [InlineData(-9e+17, "-900000000000000000")]
    [InlineData(-9e+18, "-9000000000000000000")]
    [InlineData(-9e+19, "-90000000000000000000")]
    [InlineData(-9e+20, "-900000000000000000000")]
    [InlineData(-9e+100, "-90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
    [InlineData(-9e+307,
        "-90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
    [InlineData(-9e-1, "-0.9")]
    [InlineData(-9e-2, "-0.09")]
    [InlineData(-9e-3, "-0.009")]
    [InlineData(-9e-4, "-0.0009")]
    [InlineData(-9e-5, "-0.00009")]
    [InlineData(-9e-6, "-0.000009")]
    [InlineData(-9e-7, "-0.0000009")]
    [InlineData(-9e-8, "-0.00000009")]
    [InlineData(-9e-9, "-0.000000009")]
    [InlineData(-9e-10, "-0.0000000009")]
    [InlineData(-9e-11, "-0.00000000009")]
    [InlineData(-9e-12, "-0.000000000009")]
    [InlineData(-9e-13, "-0.0000000000009")]
    [InlineData(-9e-14, "-0.00000000000009")]
    [InlineData(-9e-15, "-0.000000000000009")]
    [InlineData(-9e-16, "-0.0000000000000009")]
    [InlineData(-9e-17, "-0.00000000000000009")]
    [InlineData(-9e-18, "-0.000000000000000009")]
    [InlineData(-9e-19, "-0.0000000000000000009")]
    [InlineData(-9e-20, "-0.00000000000000000009")]
    [InlineData(-9e-100, "-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009")]
    [InlineData(-9e-320,
        "-0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009")]
    [InlineData(1234567890123456.0, "1234567890123456")]
    [InlineData(123456789012345.6, "123456789012345.6")]
    [InlineData(12345678901234.56, "12345678901234.56")]
    [InlineData(1234567890123.456, "1234567890123.456")]
    [InlineData(123456789012.3456, "123456789012.3456")]
    [InlineData(12345678901.23456, "12345678901.23456")]
    [InlineData(1234567890.123456, "1234567890.123456")]
    [InlineData(123456789.0123456, "123456789.0123456")]
    [InlineData(12345678.90123456, "12345678.90123456")]
    [InlineData(1234567.890123456, "1234567.890123456")]
    [InlineData(123456.7890123456, "123456.7890123456")]
    [InlineData(12345.67890123456, "12345.67890123456")]
    [InlineData(1234.567890123456, "1234.567890123456")]
    [InlineData(123.4567890123456, "123.4567890123456")]
    [InlineData(12.34567890123456, "12.34567890123456")]
    [InlineData(1.234567890123456, "1.234567890123456")]
    [InlineData(-1234567890123456.0, "-1234567890123456")]
    [InlineData(-123456789012345.6, "-123456789012345.6")]
    [InlineData(-12345678901234.56, "-12345678901234.56")]
    [InlineData(-1234567890123.456, "-1234567890123.456")]
    [InlineData(-123456789012.3456, "-123456789012.3456")]
    [InlineData(-12345678901.23456, "-12345678901.23456")]
    [InlineData(-1234567890.123456, "-1234567890.123456")]
    [InlineData(-123456789.0123456, "-123456789.0123456")]
    [InlineData(-12345678.90123456, "-12345678.90123456")]
    [InlineData(-1234567.890123456, "-1234567.890123456")]
    [InlineData(-123456.7890123456, "-123456.7890123456")]
    [InlineData(-12345.67890123456, "-12345.67890123456")]
    [InlineData(-1234.567890123456, "-1234.567890123456")]
    [InlineData(-123.4567890123456, "-123.4567890123456")]
    [InlineData(-12.34567890123456, "-12.34567890123456")]
    [InlineData(-1.234567890123456, "-1.234567890123456")]
    public void BigDecimalShouldBeConstructableFromDoubleValueUsingDecimalConversion(double value, string expected)
    {
        // Given
        BigDecimal candidate = new(value, ConversionMode.Decimal);

        // When
        string actual = candidate.ToString();

        // Then
        Assert.Equal(expected, actual);
    }
}
